{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-console */\nimport React, { PureComponent } from 'react';\nimport Header from 'next/head';\nimport classnames from 'classnames';\nimport { Row, Col, message, Button } from 'antd';\nimport Router, { withRouter } from 'next/router';\nimport { streamService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { accessPrivateRequest } from 'src/redux/streaming/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport { getStreamConversationSuccess, resetStreamMessage } from '@redux/stream-chat/actions';\nimport PrivatePublisher from 'src/components/streaming/webrtc/privatechat/publisher';\nimport PrivateSubscriber from 'src/components/streaming/webrtc/privatechat/subscriber';\nimport { getResponseError } from '@lib/utils';\nimport { Description } from '@components/streaming';\nimport AntVideoPlayer from '@components/streaming/ant-video-player'; // eslint-disable-next-line no-shadow\n\nvar STREAM_EVENT;\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  STREAM_EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  STREAM_EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  STREAM_EVENT[\"RECEIVED_PAID_TOKEN\"] = \"RECEIVED_PAID_TOKEN\";\n  STREAM_EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nvar STREAM_JOINED = 'private-stream/streamJoined';\nvar STREAM_LEAVED = 'private-stream/streamLeaved';\nvar JOINED_THE_ROOM = 'JOINED_THE_ROOM';\n\nvar ModelPrivateChat = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ModelPrivateChat, _PureComponent);\n\n  var _super = _createSuper(ModelPrivateChat);\n\n  function ModelPrivateChat(props) {\n    var _this;\n\n    _classCallCheck(this, ModelPrivateChat);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"publisherRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"subscriberRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"previewPlayerRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamList\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onbeforeunload\", function () {\n      _this.leaveSession();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"receivedPaidTokenHandler\", function (_ref) {\n      var _activeConversation$d;\n\n      var token = _ref.token,\n          conversationId = _ref.conversationId;\n      var activeConversation = _this.props.activeConversation;\n      var receivedToken = _this.state.receivedToken;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        _this.setState({\n          receivedToken: receivedToken + token\n        });\n      }\n    });\n\n    _this.state = {\n      // sessionId: '',\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    };\n    return _this;\n  }\n\n  _createClass(ModelPrivateChat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          router = _this$props.router,\n          access = _this$props.accessPrivateRequest;\n      var _router$query = router.query,\n          id = _router$query.id,\n          streamId = _router$query.streamId;\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      Router.events.on('routeChangeStart', this.onbeforeunload);\n      this.socket = this.context;\n      this.publisherRef = /*#__PURE__*/React.createRef();\n      this.subscriberRef = /*#__PURE__*/React.createRef();\n      this.previewPlayerRef = /*#__PURE__*/React.createRef();\n      this.proccessRequest(streamId);\n      access(id);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _activeConversation$d2;\n\n      var _this$props2 = this.props,\n          router = _this$props2.router,\n          activeConversation = _this$props2.activeConversation,\n          access = _this$props2.accessPrivateRequest;\n\n      if (prevProps.router.query.id !== router.query.id) {\n        var _router$query2 = router.query,\n            id = _router$query2.id,\n            streamId = _router$query2.streamId;\n        this.socket = this.context;\n        access(id);\n        this.previewPlayerRef.current && this.previewPlayerRef.current.stop();\n        this.proccessRequest(\"\".concat(streamId));\n      }\n\n      if (activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d2 = activeConversation.data) !== null && _activeConversation$d2 !== void 0 && _activeConversation$d2._id && activeConversation !== prevProps.activeConversation) {\n        var _prevProps$activeConv;\n\n        this.initSocketEvent();\n        ((_prevProps$activeConv = prevProps.activeConversation) === null || _prevProps$activeConv === void 0 ? void 0 : _prevProps$activeConv._id) && this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n          conversationId: prevProps.activeConversation._id\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      Router.events.off('routeChangeStart', this.onbeforeunload);\n    }\n  }, {\n    key: \"handler\",\n    value: function handler(_ref2) {\n      var _activeConversation$d3;\n\n      var total = _ref2.total,\n          members = _ref2.members,\n          conversationId = _ref2.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n        this.setState({\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"initSocketEvent\",\n    value: function initSocketEvent() {\n      var _this2 = this;\n\n      this.socket = this.context;\n      this.socket.on(JOINED_THE_ROOM, function (_ref3) {\n        var streamId = _ref3.streamId,\n            streamList = _ref3.streamList,\n            conversationId = _ref3.conversationId;\n        var activeConversation = _this2.props.activeConversation;\n        if (conversationId !== activeConversation.data._id) return;\n        _this2.streamId = streamId;\n        _this2.streamList = streamList;\n        _this2.publisherRef.current && _this2.publisherRef.current.publish(streamId);\n        _this2.previewPlayerRef.current && _this2.previewPlayerRef.current.stop();\n\n        if (streamList.length) {\n          _this2.subscriberRef.current && _this2.subscriberRef.current.play(streamList[0]);\n        }\n      });\n      this.socket.on(STREAM_JOINED, function (data) {\n        var activeConversation = _this2.props.activeConversation;\n        if (data.conversationId !== activeConversation.data._id) return;\n\n        if (_this2.streamId !== data.streamId) {\n          _this2.subscriberRef.current && _this2.subscriberRef.current.play(data.streamId);\n        }\n      });\n      this.socket.on(STREAM_LEAVED, function (data) {\n        var activeConversation = _this2.props.activeConversation;\n        if (data.conversationId !== activeConversation.data._id) return;\n        _this2.streamList = _this2.streamList.filter(function (id) {\n          return id !== data.streamId;\n        });\n\n        if (_this2.streamId !== data.streamId) {\n          _this2.subscriberRef.current && _this2.subscriberRef.current.close();\n        }\n\n        message.error('Private call has ended.');\n        window.setTimeout(function () {\n          Router.push('/live');\n        }, 1000);\n      });\n    }\n  }, {\n    key: \"leaveSession\",\n    value: function leaveSession() {\n      var _activeConversation$d4;\n\n      var _this$props3 = this.props,\n          activeConversation = _this$props3.activeConversation,\n          dispatchResetStreamMessage = _this$props3.resetStreamMessage;\n      dispatchResetStreamMessage();\n\n      if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d4 = activeConversation.data) !== null && _activeConversation$d4 !== void 0 && _activeConversation$d4._id) {\n        this.socket.off(JOINED_THE_ROOM);\n        this.socket.off(STREAM_JOINED);\n        this.socket.off(STREAM_LEAVED);\n        this.socket.off(STREAM_EVENT.RECEIVED_PAID_TOKEN);\n        this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n          conversationId: activeConversation.data._id\n        });\n        this.publisherRef.current && this.publisherRef.current.stop();\n        this.subscriberRef.current && this.subscriberRef.current.stop();\n        this.previewPlayerRef.current && this.previewPlayerRef.current.stop();\n      }\n\n      this.setState({\n        processing: false,\n        roomJoined: false,\n        total: 0,\n        receivedToken: 0,\n        members: []\n      });\n    }\n  }, {\n    key: \"acceptRequest\",\n    value: function () {\n      var _acceptRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$props4, router, dispatchGetStreamConversationSuccess, resp, _resp$data, sessionId, conversation, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props4 = this.props, router = _this$props4.router, dispatchGetStreamConversationSuccess = _this$props4.getStreamConversationSuccess;\n\n                if (router.query.id) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.prev = 3;\n                this.setState({\n                  processing: true\n                });\n                _context.next = 7;\n                return streamService.acceptPrivateChat(\"\".concat(router.query.id));\n\n              case 7:\n                resp = _context.sent;\n\n                if (resp && resp.data) {\n                  this.socket = this.context;\n                  _resp$data = resp.data, sessionId = _resp$data.sessionId, conversation = _resp$data.conversation;\n                  this.socket && this.socket.emit(STREAM_EVENT.JOIN_ROOM, {\n                    conversationId: conversation._id\n                  });\n                  this.publisherRef.current && this.publisherRef.current.start(conversation._id, sessionId);\n                  dispatchGetStreamConversationSuccess({\n                    data: conversation\n                  });\n                }\n\n                _context.next = 17;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](3);\n                _context.next = 15;\n                return Promise.resolve(_context.t0);\n\n              case 15:\n                error = _context.sent;\n                message.error(getResponseError(error));\n\n              case 17:\n                _context.prev = 17;\n                this.setState({\n                  processing: false\n                });\n                return _context.finish(17);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 11, 17, 20]]);\n      }));\n\n      function acceptRequest() {\n        return _acceptRequest.apply(this, arguments);\n      }\n\n      return acceptRequest;\n    }()\n  }, {\n    key: \"roomJoinedHandler\",\n    value: function roomJoinedHandler(_ref4) {\n      var _activeConversation$d5;\n\n      var total = _ref4.total,\n          members = _ref4.members,\n          conversationId = _ref4.conversationId;\n      var activeConversation = this.props.activeConversation;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d5 = activeConversation.data) === null || _activeConversation$d5 === void 0 ? void 0 : _activeConversation$d5._id) === conversationId) {\n        this.setState({\n          roomJoined: true,\n          total: total,\n          members: members\n        });\n      }\n    }\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      this.publisherRef.current && this.publisherRef.current.stop();\n      this.subscriberRef.current && this.subscriberRef.current.stop();\n      setTimeout(function () {\n        window.location.href = '/';\n      }, 10 * 1000);\n    }\n  }, {\n    key: \"proccessRequest\",\n    value: function proccessRequest(streamId) {\n      var _this3 = this;\n\n      var roomJoined = this.state.roomJoined;\n\n      if (roomJoined) {\n        return;\n      }\n\n      if (streamId) {\n        setTimeout(function () {\n          if (!_this3.previewPlayerRef.current) {\n            _this3.proccessRequest(streamId);\n\n            return;\n          }\n\n          _this3.previewPlayerRef.current.play(streamId);\n        }, 1000);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var settings = this.props.settings;\n      var _this$state = this.state,\n          processing = _this$state.processing,\n          total = _this$state.total,\n          members = _this$state.members,\n          roomJoined = _this$state.roomJoined,\n          receivedToken = _this$state.receivedToken;\n      return __jsx(React.Fragment, null, __jsx(Header, null, __jsx(\"title\", null, \"Private Chat\")), __jsx(Event, {\n        event: STREAM_EVENT.STREAM_INFORMATION_CHANGED,\n        handler: this.handler.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.JOINED_THE_ROOM,\n        handler: this.roomJoinedHandler.bind(this)\n      }), __jsx(Event, {\n        event: STREAM_EVENT.RECEIVED_PAID_TOKEN,\n        handler: this.receivedPaidTokenHandler.bind(this)\n      }), __jsx(Row, null, __jsx(Col, {\n        md: 12,\n        xs: 24\n      }, !roomJoined ? __jsx(Button, {\n        type: \"primary\",\n        onClick: this.acceptRequest.bind(this),\n        loading: processing,\n        block: true\n      }, \"Accept Private Call Request\") : __jsx(Button, {\n        type: \"primary\",\n        onClick: this.leave.bind(this),\n        block: true,\n        disabled: processing\n      }, \"Stop Streaming\"), __jsx(\"div\", {\n        className: classnames('private-streaming-container', !roomJoined ? 'hidden' : '')\n      }, __jsx(PrivatePublisher, _extends({}, this.props, {\n        ref: this.publisherRef,\n        configs: {\n          localVideoId: 'private-publisher'\n        }\n      })), __jsx(PrivateSubscriber, _extends({}, this.props, {\n        ref: this.subscriberRef,\n        configs: {\n          isPlayMode: true\n        }\n      }))), __jsx(AntVideoPlayer, {\n        ref: this.previewPlayerRef,\n        settings: settings,\n        configs: {\n          isPlayMode: true\n        },\n        containerClassName: roomJoined ? 'hidden' : ''\n      }), __jsx(Description, {\n        roomJoined: roomJoined,\n        receivedToken: receivedToken\n      })), __jsx(Col, {\n        xs: 24,\n        md: 12\n      }, __jsx(ChatBox, _extends({}, this.props, {\n        totalParticipant: total,\n        members: members\n      })))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref5) {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ctx = _ref5.ctx;\n\n                if (ctx.query.id) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                if (!true) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                Router.push('/');\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                ctx.res.writeHead && ctx.res.writeHead(302, {\n                  Location: '/'\n                });\n                ctx.res.end && ctx.res.end();\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return ModelPrivateChat;\n}(PureComponent);\n\n_defineProperty(ModelPrivateChat, \"authenticate\", true);\n\n_defineProperty(ModelPrivateChat, \"onlyPerformer\", true);\n\nModelPrivateChat.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread({\n    user: state.user.current,\n    loggedIn: state.auth.loggedIn,\n    activeConversation: state.streamMessage.activeConversation\n  }, state.streaming);\n};\n\nvar mapDispatchs = {\n  accessPrivateRequest: accessPrivateRequest,\n  getStreamConversationSuccess: getStreamConversationSuccess,\n  resetStreamMessage: resetStreamMessage\n};\nexport default connect(mapStateToProps, mapDispatchs)(withRouter(ModelPrivateChat));","map":null,"metadata":{},"sourceType":"module"}