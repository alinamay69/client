{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport videojs from 'video.js';\nvar Button = videojs.getComponent('Button');\n\nvar AudioMuteToggleButton = /*#__PURE__*/function (_Button) {\n  _inherits(AudioMuteToggleButton, _Button);\n\n  var _super = _createSuper(AudioMuteToggleButton);\n\n  function AudioMuteToggleButton(player, options) {\n    var _this;\n\n    _classCallCheck(this, AudioMuteToggleButton);\n\n    _this = _super.call(this, player, options);\n\n    _defineProperty(_assertThisInitialized(_this), \"initialized\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"isMicMuted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_options\", void 0);\n\n    _this._options = options;\n\n    if (typeof _this._options.isMicMuted !== 'undefined') {\n      _this.isMicMuted = _this._options.isMicMuted;\n    }\n\n    if (player.readyState()) {\n      _this.initialized = true;\n      var text = _this.isMicMuted ? 'Unmute Local Mic' : 'Mute Local Mic';\n\n      _this.controlText(text);\n    }\n\n    _this.on(player, 'timeupdate', function () {\n      if (_this.initialized) {\n        _this.update();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(AudioMuteToggleButton, [{\n    key: \"update\",\n    value: function update() {}\n  }, {\n    key: \"buildCSSClass\",\n    value: function buildCSSClass() {\n      return \"vjs-audio  \".concat(_get(_getPrototypeOf(AudioMuteToggleButton.prototype), \"buildCSSClass\", this).call(this));\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      var _this$_options = this._options,\n          muteLocalMic = _this$_options.muteLocalMic,\n          unmuteLocalMic = _this$_options.unmuteLocalMic;\n\n      if (this.initialized) {\n        var audio = document.querySelector('.vjs-audio');\n        audio.classList.toggle('vjs-audio-off');\n        var controlText = '';\n\n        if (this.isMicMuted) {\n          unmuteLocalMic();\n          controlText = 'Mute Local Mic';\n        } else {\n          muteLocalMic();\n          controlText = 'Unmute Local Mic';\n        }\n\n        if (this.controlText() !== controlText) {\n          this.controlText(controlText);\n        }\n\n        this.isMicMuted = !this.isMicMuted;\n      }\n    }\n  }]);\n\n  return AudioMuteToggleButton;\n}(Button);\n\nvideojs.registerComponent('AudioMuteToggleButton', AudioMuteToggleButton);\nexport default AudioMuteToggleButton;","map":null,"metadata":{},"sourceType":"module"}