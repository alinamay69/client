{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable jsx-a11y/iframe-has-title */\n\n/* eslint-disable react/no-danger */\n\n/* eslint-disable dot-notation */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport { camAggregatorService } from '@services/cam-aggregator.service';\nimport { getResponseError } from '@lib/utils';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport AggregatorProfileGridCard from '@components/cam-aggregator/grid-card';\nimport './details.less';\nimport Link from 'next/link';\nimport Title from 'antd/lib/typography/Title';\nimport Loader from '@components/common/base/loader';\nimport { backToTop } from '@lib/layout';\n\nclass CamaggregatorDetails extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      relatedCams: [],\n      loading: true\n    });\n  }\n\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query\n      } = ctx;\n      const resp = await camAggregatorService.profile(query.username);\n\n      if (false) {\n        if (!resp.data) return Router.push('/cams');\n\n        if (!resp.data.iframe) {\n          message.info('Please few minutes to profile');\n          Router.push(`${resp.data.profileLink}`);\n        }\n\n        if (!resp.data.iframe) return Router.push({\n          pathname: '/stream',\n          query: {\n            performer: JSON.stringify(resp.data)\n          }\n        }, `/profile/${resp.data.username}`);\n      }\n\n      return {\n        performer: resp.data\n      };\n    } catch (e) {\n      if (false) {\n        return Router.push('/cams');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, {\n        Location: '/cams'\n      });\n      ctx.res.end && ctx.res.end();\n      return {};\n    }\n  }\n\n  componentDidMount() {\n    this.getRelatedCams();\n    backToTop();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      performer\n    } = this.props;\n\n    if (performer !== prevProps.performer) {\n      this.getRelatedCams();\n      backToTop();\n    }\n  }\n\n  async getRelatedCams() {\n    try {\n      await this.setState({\n        loading: true\n      });\n      const {\n        performer\n      } = this.props;\n      const resp = await camAggregatorService.related(performer.username);\n      await this.setState({\n        relatedCams: resp.data\n      });\n    } catch (error) {\n      const err = await Promise.resolve(error);\n      message.error(getResponseError(err));\n    } finally {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  _renderRelatedCams() {\n    const {\n      relatedCams\n    } = this.state;\n    return relatedCams !== null && relatedCams !== void 0 && relatedCams.length ? __jsx(PerformerGrid, {\n      total: relatedCams.length,\n      data: relatedCams,\n      success: true,\n      searching: false,\n      gridCard: AggregatorProfileGridCard\n    }) : null;\n  }\n\n  _renderIframe(iframe) {\n    let newSrc = iframe;\n\n    if (/(<([^>]+)>)/i.test(iframe)) {\n      const matches = iframe.match(/\\bhttps?:\\/\\/\\S+/gi);\n      if (!matches.length) return null; // eslint-disable-next-line prefer-destructuring\n\n      newSrc = matches[0];\n    }\n\n    return __jsx(\"iframe\", {\n      src: newSrc,\n      style: {\n        width: '100%',\n        border: 'none'\n      },\n      height: \"500\",\n      frameBorder: \"none\"\n    });\n  }\n\n  render() {\n    var _performer$tags;\n\n    const {\n      performer,\n      ui\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, `${ui === null || ui === void 0 ? void 0 : ui.siteName} | ${performer === null || performer === void 0 ? void 0 : performer.username}`)), __jsx(Loader, {\n      spinning: loading,\n      fullScreen: true\n    }), __jsx(Row, {\n      className: \"cams-details\"\n    }, __jsx(Col, {\n      md: 6,\n      xs: 24\n    }, __jsx(\"div\", {\n      className: \"profile-card\"\n    }, __jsx(\"div\", {\n      className: \"avatar\"\n    }, performer.avatar && __jsx(\"img\", {\n      src: performer.avatar,\n      alt: performer.username,\n      style: {\n        objectFit: 'contain'\n      }\n    })), __jsx(\"div\", {\n      className: \"profile\"\n    }, __jsx(\"div\", {\n      className: \"name\"\n    }, __jsx(\"span\", {\n      className: \"lable\"\n    }, \"Username: \"), __jsx(\"span\", {\n      className: \"\",\n      style: {\n        textTransform: 'capitalize'\n      }\n    }, __jsx(\"a\", {\n      href: performer.profileLink,\n      target: \"_blank\",\n      rel: \"noreferrer\"\n    }, performer.username))), __jsx(\"div\", {\n      className: \"gender\"\n    }, __jsx(\"span\", {\n      className: \"lable\"\n    }, \"Gender: \"), __jsx(\"span\", {\n      className: \"\",\n      style: {\n        textTransform: 'capitalize'\n      }\n    }, performer.gender)), performer.age ? __jsx(\"div\", {\n      className: \"age\"\n    }, __jsx(\"span\", {\n      className: \"lable\"\n    }, \"Age: \"), __jsx(\"span\", {\n      className: \"\",\n      style: {\n        textTransform: 'capitalize'\n      }\n    }, performer.age)) : null, __jsx(\"div\", {\n      className: \"bio\"\n    }, __jsx(\"span\", null, performer.aboutMe)), __jsx(\"br\", null), (_performer$tags = performer.tags) !== null && _performer$tags !== void 0 && _performer$tags.length ? __jsx(React.Fragment, null, __jsx(\"p\", null, \"What We do on webcam\"), __jsx(\"div\", {\n      className: \"tags\"\n    }, performer.tags.map(tag => __jsx(Link, {\n      href: {\n        pathname: '/cams',\n        query: {\n          tag\n        }\n      },\n      key: tag,\n      as: `/cams?tag=${tag}`\n    }, __jsx(\"a\", null, \"#\", tag))))) : null), __jsx(Button, {\n      type: \"primary\",\n      className: \"custom-button\",\n      href: performer.profileLink\n    }, __jsx(\"span\", null, `START LIVE SEX SHOW WITH ${performer.username}`)))), __jsx(Col, {\n      md: 18,\n      xs: 24\n    }, performer.iframe ? this._renderIframe(performer.iframe) : this._renderRelatedCams()), __jsx(Title, null, \"Related Cams\"), performer.iframe ? this._renderRelatedCams() : null));\n  }\n\n}\n\n_defineProperty(CamaggregatorDetails, \"authenticate\", false);\n\nconst mapStateToProps = state => ({\n  ui: state.ui\n});\n\nexport default connect(mapStateToProps)(CamaggregatorDetails);","map":null,"metadata":{},"sourceType":"module"}