{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable dot-notation */\n\n/* eslint-disable camelcase */\nimport './index.less';\nimport * as React from 'react';\nimport classnames from 'classnames';\nimport fetch from 'isomorphic-unfetch';\nimport withAntMedia from 'src/antmedia';\nimport { streamService } from 'src/services';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport videojs from 'video.js';\nimport { generateUuid } from '@lib/string';\n\nvar AntVideoPlayer = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AntVideoPlayer, _React$PureComponent);\n\n  var _super = _createSuper(AntVideoPlayer);\n\n  function AntVideoPlayer() {\n    var _this;\n\n    _classCallCheck(this, AntVideoPlayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"videoContainerRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"streamId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"player\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"activeStreams\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"getLiveStreamOrVodURLInterval\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", \"player-\".concat(generateUuid()));\n\n    return _this;\n  }\n\n  _createClass(AntVideoPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.videoContainerRef = /*#__PURE__*/React.createRef();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.getLiveStreamOrVodURLInterval && clearInterval(this.getLiveStreamOrVodURLInterval);\n      this.player && this.player.dispose();\n    }\n  }, {\n    key: \"handler\",\n    value: function () {\n      var _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(info, obj) {\n        var _this$props, webRTCAdaptor, settings, token, activeStream, _token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, webRTCAdaptor = _this$props.webRTCAdaptor, settings = _this$props.settings;\n\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.INITIALIZED)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 4;\n                return streamService.getSubscriberToken({\n                  streamId: this.streamId,\n                  settings: settings\n                });\n\n              case 4:\n                token = _context.sent;\n                webRTCAdaptor.play(this.streamId, token);\n                _context.next = 26;\n                break;\n\n              case 8:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.NEW_STREAM_AVAILABLE)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                activeStream = this.activeStreams.find(function (id) {\n                  return id === obj.streamId;\n                });\n\n                if (this.player) {\n                  this.player.dispose();\n                  this.player = undefined;\n                }\n\n                if (!activeStream) {\n                  this.activeStreams.push(obj.streamId);\n                  this.createRemoteVideo(obj.stream);\n                }\n\n                _context.next = 26;\n                break;\n\n              case 14:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.PLAY_FINISHED)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                this.activeStreams = this.activeStreams.filter(function (id) {\n                  return id !== obj.streamId;\n                });\n                this.removeRemoteVideo();\n                setTimeout(function () {\n                  webRTCAdaptor.getStreamInfo(obj.streamId);\n                }, 3000);\n                _context.next = 26;\n                break;\n\n              case 20:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.STREAM_INFORMATION)) {\n                  _context.next = 26;\n                  break;\n                }\n\n                if (!(obj.streamId === this.streamId)) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _context.next = 24;\n                return streamService.getSubscriberToken({\n                  streamId: obj.streamId,\n                  settings: settings\n                });\n\n              case 24:\n                _token = _context.sent;\n                webRTCAdaptor.play(obj.streamId, _token);\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handler(_x, _x2) {\n        return _handler.apply(this, arguments);\n      }\n\n      return handler;\n    }()\n  }, {\n    key: \"createPlaybackideo\",\n    value: function createPlaybackideo(streamId) {\n      var classNames = this.props.classNames;\n      var video = document.createElement('video');\n      video.setAttribute('id', this.id);\n      video.setAttribute('class', classnames(classNames, 'subscriber video-js'));\n      video.autoplay = true;\n      video.muted = true;\n      video.controls = true;\n      video.playsInline = true;\n      video.width = this.videoContainerRef.current.offsetWidth;\n      this.videoContainerRef.current.append(video);\n      this.player = videojs(this.id, {\n        autoplay: true,\n        liveui: true\n      });\n      this.player.on('ended', this.ended.bind(this));\n      this.player.on('error', this.ended.bind(this));\n      this.player.controls(true);\n      streamId && this.playHLS(streamId);\n    }\n  }, {\n    key: \"resetPlaybackVideo\",\n    value: function resetPlaybackVideo() {\n      var _this$player;\n\n      this.streamId = '';\n\n      if ((_this$player = this.player) !== null && _this$player !== void 0 && _this$player.src()) {\n        this.player.dispose();\n        this.player = undefined;\n      }\n    }\n  }, {\n    key: \"cbErrorHandler\",\n    value: function () {\n      var _cbErrorHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(error) {\n        var _this$props2, webRTCAdaptor, initWebRTCAdaptor;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (error === 'no_stream_exist') {\n                  _this$props2 = this.props, webRTCAdaptor = _this$props2.webRTCAdaptor, initWebRTCAdaptor = _this$props2.initWebRTCAdaptor;\n\n                  if (!webRTCAdaptor) {\n                    initWebRTCAdaptor(this.handler.bind(this), this.cbErrorHandler.bind(this));\n                  } else {\n                    this.streamId && webRTCAdaptor.getStreamInfo(this.streamId);\n                  }\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cbErrorHandler(_x3) {\n        return _cbErrorHandler.apply(this, arguments);\n      }\n\n      return cbErrorHandler;\n    }()\n  }, {\n    key: \"ended\",\n    value: function () {\n      var _ended = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var settings, src;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                settings = this.props.settings;\n\n                if (this.streamId) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                _context3.next = 5;\n                return streamService.getLiveStreamOrVodURL({\n                  streamId: this.streamId,\n                  settings: settings,\n                  appName: settings.AntMediaAppname\n                });\n\n              case 5:\n                src = _context3.sent;\n\n                if (src) {\n                  this.getLiveStreamOrVodURLInterval = setInterval(function () {\n                    fetch(src, {\n                      method: 'HEAD'\n                    }).then(function () {\n                      _this2.playHLS(_this2.streamId);\n\n                      _this2.getLiveStreamOrVodURLInterval && clearInterval(_this2.getLiveStreamOrVodURLInterval);\n                    });\n                  }, 5000);\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function ended() {\n        return _ended.apply(this, arguments);\n      }\n\n      return ended;\n    }()\n  }, {\n    key: \"createRemoteVideo\",\n    value: function createRemoteVideo(stream) {\n      var classNames = this.props.classNames;\n      var video = document.createElement('video');\n      video.setAttribute('id', this.id);\n      video.setAttribute('class', classnames(classNames));\n      video.autoplay = true;\n      video.muted = true;\n      video.controls = true;\n      video.playsInline = true;\n      video.srcObject = stream;\n      video.width = this.videoContainerRef.current.offsetWidth;\n      this.videoContainerRef.current.append(video);\n    }\n  }, {\n    key: \"removeRemoteVideo\",\n    value: function removeRemoteVideo() {\n      var video = document.getElementById(this.id);\n\n      if (video) {\n        video.srcObject = null; // document.querySelector('.video-container').removeChild(video);\n\n        this.videoContainerRef.current.removeChild(video);\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(streamId) {\n        var _this$props3, initWebRTCAdaptor, initialized, webRTCAdaptor, settings, token;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props3 = this.props, initWebRTCAdaptor = _this$props3.initWebRTCAdaptor, initialized = _this$props3.initialized, webRTCAdaptor = _this$props3.webRTCAdaptor, settings = _this$props3.settings;\n                this.streamId = streamId;\n\n                if (!initialized) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                _context4.next = 5;\n                return streamService.getSubscriberToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 5:\n                token = _context4.sent;\n                webRTCAdaptor.play(streamId, token);\n                return _context4.abrupt(\"return\");\n\n              case 8:\n                initWebRTCAdaptor(this.handler.bind(this), this.cbErrorHandler.bind(this));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function play(_x4) {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n  }, {\n    key: \"playHLS\",\n    value: function () {\n      var _playHLS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(streamId) {\n        var _this3 = this;\n\n        var _this$props4, configs, settings, appName, src;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!this.player) {\n                  this.createPlaybackideo(streamId);\n                }\n\n                _this$props4 = this.props, configs = _this$props4.configs, settings = _this$props4.settings;\n                appName = configs.appName || settings.AntMediaAppname;\n                this.streamId = streamId;\n                this.getLiveStreamOrVodURLInterval && clearInterval(this.getLiveStreamOrVodURLInterval);\n                _context5.next = 7;\n                return streamService.getLiveStreamOrVodURL({\n                  appName: appName,\n                  settings: settings,\n                  streamId: streamId\n                });\n\n              case 7:\n                src = _context5.sent;\n\n                if (src) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 10:\n                // this.player.addClass('vjs-waiting');\n                setTimeout(function () {\n                  if (!_this3.player) return;\n\n                  _this3.player.src({\n                    type: 'application/x-mpegURL',\n                    src: src\n                  });\n\n                  _this3.player.play();\n\n                  _this3.player.controls(true);\n                }, 1 * 1000);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function playHLS(_x5) {\n        return _playHLS.apply(this, arguments);\n      }\n\n      return playHLS;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var leaveSession = this.props.leaveSession;\n      this.streamId = '';\n      leaveSession && leaveSession();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var containerClassName = this.props.containerClassName;\n      return __jsx(\"div\", {\n        className: classnames('video-container', containerClassName),\n        ref: this.videoContainerRef\n      });\n    }\n  }]);\n\n  return AntVideoPlayer;\n}(React.PureComponent);\n\nexport default /*#__PURE__*/React.memo(withAntMedia(AntVideoPlayer));","map":null,"metadata":{},"sourceType":"module"}