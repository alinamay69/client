{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Space, Row, Col, Pagination } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { createSelector } from 'src/lib';\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\nimport { generateUuid } from '@lib/string';\n\nvar renderTitle = function renderTitle(gender, name) {\n  return __jsx(\"div\", {\n    className: \"p-title\"\n  }, __jsx(\"span\", {\n    style: {\n      marginRight: 5\n    }\n  }, name), gender === 'male' ? __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(MaleSignIcon, null)) : gender === 'female' ? __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(TransgenderIcon, null)));\n};\n\nvar renderTags = function renderTags(tags) {\n  return __jsx(Space, {\n    className: \"tags\",\n    wrap: true,\n    size: [5, 2]\n  }, tags.map(function (tag) {\n    return __jsx(Link, {\n      href: {\n        pathname: '/tag',\n        query: {\n          tags: tag\n        }\n      },\n      key: tag,\n      as: \"/tag/\".concat(tag)\n    }, __jsx(\"a\", null, \"#\", tag));\n  }));\n};\n\nvar PerformerGrid = function PerformerGrid(_ref) {\n  var data = _ref.data,\n      searching = _ref.searching,\n      success = _ref.success,\n      title = _ref.title,\n      onLike = _ref.onLike,\n      loggedIn = _ref.loggedIn,\n      isPage = _ref.isPage,\n      offset = _ref.offset,\n      limit = _ref.limit,\n      total = _ref.total,\n      setFilter = _ref.setFilter,\n      banners = _ref.banners,\n      gridCard = _ref.gridCard,\n      placeholderAvatarUrl = _ref.placeholderAvatarUrl,\n      render = _ref.render;\n  var defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n\n  var PerformerCard = function PerformerCard(_ref2) {\n    var _performer$stats;\n\n    var performer = _ref2.performer,\n        className = _ref2.className;\n    var isOnline = performer.isOnline,\n        streamingStatus = performer.streamingStatus;\n    var statusClassNames = ['p-status'];\n    var status = 'offline';\n\n    if (isOnline) {\n      switch (streamingStatus) {\n        case 'private':\n          statusClassNames.push('private');\n          status = 'private chat';\n          break;\n\n        case 'group':\n          statusClassNames.push('group');\n          status = 'group chat';\n          break;\n\n        case 'public':\n          status = 'live';\n          statusClassNames.push('online');\n          break;\n\n        default:\n          status = 'online';\n          statusClassNames.push('online');\n          break;\n      }\n    } else {\n      statusClassNames.push('offline');\n    }\n\n    return __jsx(Card.Grid, {\n      className: className,\n      key: performer._id,\n      hoverable: false\n    }, performer.isBlocked && __jsx(\"div\", {\n      className: \"blocked-thumb\"\n    }, __jsx(LockOutlined, null)), __jsx(Link, {\n      href: {\n        pathname: '/stream',\n        query: {\n          performer: JSON.stringify(performer)\n        }\n      },\n      as: \"/profile/\".concat(performer.username)\n    }, __jsx(\"a\", null, __jsx(\"div\", {\n      className: \"performer-avatar\",\n      style: {\n        backgroundImage: \"url(\".concat(typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl, \")\")\n      }\n    }, __jsx(\"span\", {\n      className: statusClassNames.join(' ')\n    }, status), renderTitle(performer.gender, performer.username), (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n      className: \"p-viewer\"\n    }, __jsx(EyeOutlined, {\n      style: {\n        marginRight: 5\n      }\n    }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n      className: \"performer-bottom\"\n    }, __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n      }\n    }, __jsx(Col, null, __jsx(\"div\", null, performer.tags && renderTags(performer.tags))), __jsx(Col, null, __jsx(\"div\", {\n      \"aria-hidden\": true,\n      hidden: !loggedIn,\n      className: \"p-favorite\",\n      onClick: function onClick() {\n        return onLike(performer);\n      }\n    }, performer.isFavorite ? __jsx(HeartFilled, {\n      className: \"icon\"\n    }) : __jsx(HeartOutlined, {\n      className: \"icon\"\n    })))), __jsx(\"div\", {\n      className: \"about-me\"\n    }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n  };\n\n  var GridCard = gridCard || PerformerCard;\n\n  var RowGrid = function RowGrid(_ref3) {\n    var _data = _ref3._data;\n    return __jsx(Row, {\n      style: {\n        width: '100%'\n      }\n    }, _data && _data.length > 0 && _data.map(function (performer) {\n      return __jsx(GridCard, {\n        className: \"performer-box\",\n        key: performer._id,\n        performer: performer\n      });\n    }));\n  };\n\n  var topBanners = banners.topBanners,\n      rightBanners = banners.rightBanners,\n      bottomBanners = banners.bottomBanners;\n\n  var renderGrid = function renderGrid() {\n    var length = data.length;\n\n    if (length <= 12) {\n      return __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, data && data.length > 0 && data.map(function (performer) {\n        return __jsx(GridCard, {\n          className: \"performer-box performer-box-4-item\",\n          key: performer._id,\n          performer: performer\n        });\n      }))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : data && data.length > 0 && data.map(function (performer) {\n        return __jsx(GridCard, {\n          className: \"performer-box\",\n          key: performer._id,\n          performer: performer\n        });\n      }));\n    }\n\n    if (length > 12 && length <= 24) {\n      var dataChunk = chunk(data, 12);\n      return __jsx(React.Fragment, null, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[0] && dataChunk[0].length > 0 && dataChunk[0].map(function (performer) {\n        return __jsx(GridCard, {\n          className: \"performer-box performer-box-4-item\",\n          key: performer._id,\n          performer: performer\n        });\n      }))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, rightBanners && rightBanners.length > 0 && __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))), __jsx(RowGrid, {\n        _data: dataChunk[1]\n      })) : __jsx(RowGrid, {\n        _data: data\n      }));\n    }\n\n    if (length > 24 && length <= 36) {\n      var _dataChunk = chunk(data, 12);\n\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        _data: _dataChunk[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, _dataChunk[1] && _dataChunk[1].length > 0 && _dataChunk[1].map(function (performer) {\n        return __jsx(GridCard, {\n          className: \"performer-box performer-box-4-item\",\n          key: performer._id,\n          performer: performer\n        });\n      }))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        _data: _dataChunk[1]\n      }), __jsx(RowGrid, {\n        _data: _dataChunk[2]\n      }));\n    }\n\n    if (length > 36) {\n      var _dataChunk2 = chunk(data, 12);\n\n      var lastDataChunk = _dataChunk2.slice(3);\n\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        _data: _dataChunk2[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, _dataChunk2[1] && _dataChunk2[1].length > 0 && _dataChunk2[1].map(function (performer) {\n        return __jsx(GridCard, {\n          className: \"performer-box performer-box-4-item\",\n          key: performer._id,\n          performer: performer\n        });\n      }))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        _data: _dataChunk2[1]\n      }), __jsx(RowGrid, {\n        _data: _dataChunk2[2]\n      }), lastDataChunk.length > 0 && lastDataChunk.map(function (v) {\n        return __jsx(RowGrid, {\n          key: generateUuid(),\n          _data: v\n        });\n      }));\n    }\n\n    return __jsx(React.Fragment, null);\n  };\n\n  var actions = setFilter && total > 0 ? [total > limit && __jsx(Pagination, {\n    disabled: searching,\n    current: Math.round(offset / limit) + 1,\n    pageSize: limit,\n    total: total,\n    size: \"small\",\n    onChange: function onChange(page) {\n      return setFilter('offset', (page - 1) * limit);\n    },\n    showSizeChanger: false\n  })] : [];\n\n  if (render) {\n    /**\n     */\n    return __jsx(Card, {\n      className: \"performer-grid\",\n      title: title,\n      bordered: false,\n      hoverable: false,\n      bodyStyle: {\n        padding: '0'\n      },\n      actions: actions\n    }, __jsx(Loader, {\n      spinning: searching\n    }), data.length > 0 && data.map(function (performer) {\n      return render(performer);\n    }));\n  }\n\n  return __jsx(React.Fragment, null, isPage && (topBanners === null || topBanners === void 0 ? void 0 : topBanners.length) > 0 && __jsx(Banner, {\n    banners: topBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }), __jsx(Card, {\n    className: \"performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    bodyStyle: {\n      padding: '0'\n    },\n    actions: actions\n  }, __jsx(Loader, {\n    spinning: searching\n  }), success // eslint-disable-next-line no-nested-ternary\n  && (total > 0 ? isPage ? renderGrid() : data.map(function (performer) {\n    return __jsx(Col, {\n      xl: 6,\n      md: 8,\n      sm: 10,\n      xs: 16,\n      key: performer._id\n    }, __jsx(GridCard, {\n      key: performer === null || performer === void 0 ? void 0 : performer._id,\n      className: \"performer-box\",\n      performer: performer\n    }));\n  }) : __jsx(\"div\", {\n    className: \"ant-card-head\"\n  }, \"No model found.\"))), isPage && (bottomBanners === null || bottomBanners === void 0 ? void 0 : bottomBanners.length) > 0 && __jsx(Banner, {\n    banners: bottomBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }));\n};\n\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  searching: false,\n  title: '',\n  onLike: null,\n  render: null,\n  isPage: false,\n  banners: {},\n  gridCard: null,\n  placeholderAvatarUrl: ''\n};\n\nvar bannerSelecter = function bannerSelecter(state) {\n  return state.banner.listBanners.data;\n};\n\nvar filterBanner = createSelector(bannerSelecter, function (banners) {\n  if (!banners.length) return {};\n  return {\n    topBanners: banners.filter(function (b) {\n      return b.position === 'top';\n    }),\n    rightBanners: banners.filter(function (b) {\n      return b.position === 'right';\n    }),\n    bottomBanners: banners.filter(function (b) {\n      return b.position === 'bottom';\n    })\n  };\n});\n\nvar mapStates = function mapStates(state) {\n  return {\n    placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n    banners: filterBanner(state)\n  };\n};\n\nexport default connect(mapStates)(PerformerGrid);","map":null,"metadata":{},"sourceType":"module"}