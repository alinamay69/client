{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Form, Input, Col, Row, Select, Button } from 'antd';\nimport FormItem from 'antd/lib/form/FormItem';\nconst PAYMENT_INFO_TYPE = {\n  wireTransfer: 'Wire transfer (Free)',\n  paypal: 'Paypal',\n  check: 'Issue check (U.S only)'\n};\nconst PAYMENT_INFO_CURRENCY = {\n  eurEuro: 'EUR (Euro)',\n  usdUnitedStatesDollars: 'USD (U.S Dollar)'\n};\nconst {\n  Item\n} = Form;\nconst {\n  Option\n} = Select;\nconst initFormValue = {\n  type: 'wireTransfer',\n  withdrawCurrency: 'eurEuro',\n  taxPayer: ''\n};\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 6\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\nexport default (({\n  onFinish,\n  studio,\n  loading\n}) => {\n  var _studio$bankTransferO;\n\n  const [withdrawType, setWithdrawType] = React.useState((studio === null || studio === void 0 ? void 0 : (_studio$bankTransferO = studio.bankTransferOption) === null || _studio$bankTransferO === void 0 ? void 0 : _studio$bankTransferO.type) || 'wireTransfer');\n  const [form] = Form.useForm();\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: onFinish,\n    name: \"paymentInfoSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: _objectSpread(_objectSpread({}, initFormValue), studio === null || studio === void 0 ? void 0 : studio.bankTransferOption)\n  }), __jsx(Row, null, __jsx(Col, {\n    xs: 24,\n    sm: 12\n  }, __jsx(Item, {\n    name: \"type\",\n    key: \"type\",\n    rules: [{\n      required: true\n    }],\n    label: \"Withdraw Type\"\n  }, __jsx(Select, {\n    onChange: type => [setWithdrawType(type)]\n  }, Object.keys(PAYMENT_INFO_TYPE).map(key => __jsx(Option, {\n    value: key,\n    key: key\n  }, PAYMENT_INFO_TYPE[key])))), __jsx(Item, {\n    name: \"withdrawCurrency\",\n    key: \"withdrawCurrency\",\n    rules: [{\n      required: true\n    }],\n    label: \"Withdraw Currency\"\n  }, __jsx(Select, null, Object.keys(PAYMENT_INFO_CURRENCY).map(key => __jsx(Option, {\n    value: key,\n    key: key\n  }, PAYMENT_INFO_CURRENCY[key])))), __jsx(Item, {\n    name: \"taxPayer\",\n    key: \"taxPayer\",\n    label: \"Taxpayer ID/SSN\"\n  }, __jsx(Input, null)), withdrawType === 'wireTransfer' ? [__jsx(Item, {\n    name: \"bankName\",\n    key: \"bankName\",\n    label: \"Bank Name\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank name is requried.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankAddress\",\n    key: \"bankAddress\",\n    label: \"Bank Address\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank address is requried.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankSWIFTBICABA\",\n    key: \"bankSWIFTBICABA\",\n    label: \"Bank SWIFT-BIC/ABA\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank swift BIC/ABA is required.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"additionalInformation\",\n    key: \"additionalInformation\",\n    label: \"Additional Information\"\n  }, __jsx(Input.TextArea, null))] : withdrawType === 'paypal' ? __jsx(Item, {\n    name: \"payPalAccount\",\n    key: \"payPalAccount\",\n    label: \"PayPal Account\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'paypal',\n      message: 'The paypal account is requried.'\n    })]\n  }, __jsx(Input, null)) : withdrawType === 'check' && __jsx(Item, {\n    name: \"checkPayable\",\n    key: \"checkPayable\",\n    label: \"Check Payable To\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'check',\n      message: 'The check payable is required.'\n    })]\n  }, __jsx(Input, null))), __jsx(Col, {\n    xs: 24,\n    sm: 12\n  }, withdrawType === 'wireTransfer' && [__jsx(Item, {\n    name: \"bankCity\",\n    key: \"bankCity\",\n    label: \"Bank City\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank city is requried.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankState\",\n    key: \"bankState\",\n    label: \"Bank State\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank state is requried.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankZip\",\n    key: \"bankZip\",\n    label: \"Bank Zip\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank zip is requried.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankCountry\",\n    key: \"bankCountry\",\n    label: \"Bank Country\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank country is requried.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankAcountNumber\",\n    key: \"bankAcountNumber\",\n    label: \"Bank Account Number\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The bank account number is requried.'\n    })]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"holderOfBankAccount\",\n    key: \"holderOfBankAccount\",\n    label: \"Primary Account Holder\",\n    dependencies: ['type'],\n    rules: [({\n      getFieldValue\n    }) => ({\n      required: getFieldValue('type') === 'wireTransfer',\n      message: 'The holder of bank account is required.'\n    })]\n  }, __jsx(Input, null))])), __jsx(FormItem, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: loading,\n    loading: loading\n  }, \"Save Change\")));\n});","map":null,"metadata":{},"sourceType":"module"}