{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Menu } from 'antd';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport './left-header-content.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport { useRouter } from 'next/router';\n\nconst LeftHeaderContent = ({\n  loggedIn,\n  current,\n  pluralTextModel,\n  performerCategories,\n  settings\n}) => {\n  const router = useRouter();\n  const path = settings[SETTING_KEYS.OPTION_FOR_GROUP] === 'webrtc' ? 'webrtc/' : '';\n  let MenuItem = [__jsx(Menu.Item, {\n    key: \"home\"\n  }, __jsx(Link, {\n    href: \"/cams\",\n    shallow: true,\n    as: \"/\"\n  }, __jsx(\"a\", null, \"Home\"))), __jsx(Menu.SubMenu, {\n    title: \"Categories\",\n    key: \"left-menu-performer-categories\",\n    popupClassName: \"menu-left-header-submenu-popup\"\n  }, performerCategories.data.length > 0 && performerCategories.data.map(category => __jsx(Menu.Item, {\n    key: `category-${category._id}`\n  }, __jsx(Link, {\n    href: {\n      pathname: '/performer-category',\n      query: {\n        slug: category.slug,\n        category: JSON.stringify(category)\n      }\n    },\n    as: `/performer-category/${category.slug}`\n  }, __jsx(\"a\", null, category.name))))), __jsx(Menu.Item, {\n    key: \"vip-model\"\n  }, __jsx(Link, {\n    href: \"/performer-category\",\n    as: \"/vip-models\"\n  }, __jsx(\"a\", null, \"Vip Models\"))), __jsx(Menu.Item, {\n    key: \"all-model\"\n  }, __jsx(Link, {\n    href: \"/performer-category\",\n    as: \"/all-models\"\n  }, __jsx(\"a\", null, `All ${pluralTextModel || 'Models'}`)))];\n\n  if (loggedIn && current !== null && current !== void 0 && current._id && (current === null || current === void 0 ? void 0 : current.role) === 'performer') {\n    MenuItem = [...MenuItem, __jsx(Menu.Item, {\n      disabled: router.route === '/live',\n      key: \"left-menu-live-chat\"\n    }, __jsx(Link, {\n      href: \"/live\"\n    }, __jsx(\"a\", null, \"Go Live\"))), __jsx(Menu.Item, {\n      disabled: router.route === '/live/groupchat',\n      key: \"left-menu-groupchat\"\n    }, __jsx(Link, {\n      href: `/live/${path}groupchat`\n    }, __jsx(\"a\", null, \"Group Chat\")))];\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Menu, {\n    mode: \"horizontal\",\n    className: \"menu-left-header\"\n  }, MenuItem));\n};\n\nLeftHeaderContent.defaultProps = {\n  loggedIn: false,\n  current: null,\n  settings: null,\n  pluralTextModel: '',\n  performerCategories: {\n    total: 0,\n    data: []\n  }\n};\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({\n  loggedIn: state.auth.loggedIn\n}, state.performer.performers), state.ui);\n\nconst mapDispatch = {\n  updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatch)(LeftHeaderContent);","map":null,"metadata":{},"sourceType":"module"}