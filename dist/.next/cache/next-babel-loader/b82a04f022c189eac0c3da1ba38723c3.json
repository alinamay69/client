{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { Button, Badge, message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport { streamService } from 'src/services';\nimport './index.less';\n\nvar Publisher = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Publisher, _PureComponent);\n\n  var _super = _createSuper(Publisher);\n\n  function Publisher(props) {\n    var _this;\n\n    _classCallCheck(this, Publisher);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      streamId: '',\n      processing: false\n    };\n    return _this;\n  }\n\n  _createClass(Publisher, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var publish_started = this.props.publish_started;\n      var processing = this.state.processing;\n\n      if (processing && publish_started !== prevProps.publish_started) {\n        this.handleProcessing(false);\n      }\n    }\n  }, {\n    key: \"handlePublishing\",\n    value: function () {\n      var _handlePublishing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(streamId) {\n        var _this$props, webRTCAdaptor, leaveSession, settings, token, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$props = this.props, webRTCAdaptor = _this$props.webRTCAdaptor, leaveSession = _this$props.leaveSession, settings = _this$props.settings;\n                _context.prev = 1;\n                _context.next = 4;\n                return streamService.getPublishToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 4:\n                token = _context.sent;\n                webRTCAdaptor.publish(streamId, token);\n                _context.next = 15;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 12;\n                return Promise.resolve(_context.t0);\n\n              case 12:\n                error = _context.sent;\n                message.error(getResponseError(error));\n                leaveSession();\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n\n      function handlePublishing(_x) {\n        return _handlePublishing.apply(this, arguments);\n      }\n\n      return handlePublishing;\n    }()\n  }, {\n    key: \"handleProcessing\",\n    value: function handleProcessing(processing) {\n      this.setState({\n        processing: processing\n      });\n    }\n  }, {\n    key: \"handleOnOffStream\",\n    value: function handleOnOffStream() {\n      var _this$props2 = this.props,\n          publish_started = _this$props2.publish_started,\n          webRTCAdaptor = _this$props2.webRTCAdaptor;\n      var streamId = this.state.streamId;\n\n      if (!streamId) {\n        return;\n      }\n\n      this.handleProcessing(true);\n\n      if (publish_started) {\n        webRTCAdaptor.stop(streamId);\n        return;\n      }\n\n      this.handlePublishing(streamId);\n    }\n  }, {\n    key: \"publish\",\n    value: function publish(streamId) {\n      var initialized = this.props.initialized;\n      this.setState({\n        streamId: streamId\n      });\n      initialized && this.handlePublishing(streamId);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var initWebRTCAdaptor = this.props.initWebRTCAdaptor;\n      initWebRTCAdaptor();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      window.location.reload();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          initialized = _this$props3.initialized,\n          publish_started = _this$props3.publish_started;\n      var videoProps = {\n        id: 'publisher',\n        autoPlay: true,\n        muted: true,\n        controls: true,\n        playsInline: true,\n        width: '100%',\n        hidden: !publish_started\n      };\n      return __jsx(\"div\", {\n        style: {\n          minHeight: 300\n        },\n        className: \"text-center\"\n      }, initialized && __jsx(Button, {\n        type: \"default\",\n        onClick: this.stop.bind(this),\n        block: true,\n        className: \"mb-10\"\n      }, \"Stop Streaming\"), __jsx(\"video\", videoProps), publish_started && __jsx(Badge, {\n        status: \"success\",\n        text: __jsx(\"span\", {\n          className: \"badge-success\"\n        }, \"Publishing\")\n      }));\n    }\n  }]);\n\n  return Publisher;\n}(PureComponent);\n\nexport default withAntmedia(Publisher);","map":null,"metadata":{},"sourceType":"module"}