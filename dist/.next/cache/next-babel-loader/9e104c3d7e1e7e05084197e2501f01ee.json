{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Space, Row, Col, Pagination } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { createSelector } from 'src/lib';\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\nimport { generateUuid } from '@lib/string';\n\nconst renderTitle = (gender, name) => __jsx(\"div\", {\n  className: \"p-title\"\n}, __jsx(\"span\", {\n  style: {\n    marginRight: 5\n  }\n}, name), gender === 'male' ? __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(MaleSignIcon, null)) : gender === 'female' ? __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(TransgenderIcon, null)));\n\nconst renderTags = tags => __jsx(Space, {\n  className: \"tags\",\n  wrap: true,\n  size: [5, 2]\n}, tags.map(tag => __jsx(Link, {\n  href: {\n    pathname: '/tag',\n    query: {\n      tags: tag\n    }\n  },\n  key: tag,\n  as: `/tag/${tag}`\n}, __jsx(\"a\", null, \"#\", tag))));\n\nconst PerformerGrid = ({\n  data,\n  searching,\n  success,\n  title,\n  onLike,\n  loggedIn,\n  isPage,\n  offset,\n  limit,\n  total,\n  setFilter,\n  banners,\n  gridCard,\n  placeholderAvatarUrl,\n  render\n}) => {\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n\n  const PerformerCard = ({\n    performer,\n    className\n  }) => {\n    var _performer$stats;\n\n    const {\n      isOnline,\n      streamingStatus\n    } = performer;\n    const statusClassNames = ['p-status'];\n    let status = 'offline';\n\n    if (isOnline) {\n      switch (streamingStatus) {\n        case 'private':\n          statusClassNames.push('private');\n          status = 'private chat';\n          break;\n\n        case 'group':\n          statusClassNames.push('group');\n          status = 'group chat';\n          break;\n\n        case 'public':\n          status = 'live';\n          statusClassNames.push('online');\n          break;\n\n        default:\n          status = 'online';\n          statusClassNames.push('online');\n          break;\n      }\n    } else {\n      statusClassNames.push('offline');\n    }\n\n    return __jsx(Card.Grid, {\n      className: className,\n      key: performer._id,\n      hoverable: false\n    }, performer.isBlocked && __jsx(\"div\", {\n      className: \"blocked-thumb\"\n    }, __jsx(LockOutlined, null)), __jsx(Link, {\n      href: {\n        pathname: '/stream',\n        query: {\n          performer: JSON.stringify(performer)\n        }\n      },\n      as: `/profile/${performer.username}`\n    }, __jsx(\"a\", null, __jsx(\"div\", {\n      className: \"performer-avatar\",\n      style: {\n        backgroundImage: `url(${typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl})`\n      }\n    }, __jsx(\"span\", {\n      className: statusClassNames.join(' ')\n    }, status), renderTitle(performer.gender, performer.username), (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n      className: \"p-viewer\"\n    }, __jsx(EyeOutlined, {\n      style: {\n        marginRight: 5\n      }\n    }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n      className: \"performer-bottom\"\n    }, __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between'\n      }\n    }, __jsx(Col, null, __jsx(\"div\", null, performer.tags && renderTags(performer.tags))), __jsx(Col, null, __jsx(\"div\", {\n      \"aria-hidden\": true,\n      hidden: !loggedIn,\n      className: \"p-favorite\",\n      onClick: () => onLike(performer)\n    }, performer.isFavorite ? __jsx(HeartFilled, {\n      className: \"icon\"\n    }) : __jsx(HeartOutlined, {\n      className: \"icon\"\n    })))), __jsx(\"div\", {\n      className: \"about-me\"\n    }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n  };\n\n  const GridCard = gridCard || PerformerCard;\n\n  const RowGrid = ({\n    _data\n  }) => __jsx(Row, {\n    style: {\n      width: '100%'\n    }\n  }, _data && _data.length > 0 && _data.map(performer => __jsx(GridCard, {\n    className: \"performer-box\",\n    key: performer._id,\n    performer: performer\n  })));\n\n  const {\n    topBanners,\n    rightBanners,\n    bottomBanners\n  } = banners;\n\n  const renderGrid = () => {\n    const {\n      length\n    } = data;\n\n    if (length <= 12) {\n      return __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer\n      })))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n        className: \"performer-box\",\n        key: performer._id,\n        performer: performer\n      })));\n    }\n\n    if (length > 12 && length <= 24) {\n      const dataChunk = chunk(data, 12);\n      return __jsx(React.Fragment, null, rightBanners && rightBanners.length > 0 ? __jsx(React.Fragment, null, __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        lg: 16,\n        md: 16,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[0] && dataChunk[0].length > 0 && dataChunk[0].map(performer => __jsx(GridCard, {\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer\n      })))), __jsx(Col, {\n        lg: 8,\n        md: 8,\n        xs: 24\n      }, rightBanners && rightBanners.length > 0 && __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))), __jsx(RowGrid, {\n        _data: dataChunk[1]\n      })) : __jsx(RowGrid, {\n        _data: data\n      }));\n    }\n\n    if (length > 24 && length <= 36) {\n      const dataChunk = chunk(data, 12);\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        _data: dataChunk[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer\n      })))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        _data: dataChunk[1]\n      }), __jsx(RowGrid, {\n        _data: dataChunk[2]\n      }));\n    }\n\n    if (length > 36) {\n      const dataChunk = chunk(data, 12);\n      const lastDataChunk = dataChunk.slice(3);\n      return __jsx(React.Fragment, null, __jsx(RowGrid, {\n        _data: dataChunk[0]\n      }), rightBanners && rightBanners.length > 0 ? __jsx(Row, {\n        style: {\n          width: '100%'\n        }\n      }, __jsx(Col, {\n        xl: 16,\n        lg: 18,\n        md: 18,\n        xs: 24\n      }, __jsx(Row, null, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer\n      })))), __jsx(Col, {\n        xl: 8,\n        lg: 6,\n        md: 6,\n        xs: 24\n      }, __jsx(Banner, {\n        classnames: \"right-banners\",\n        banners: rightBanners,\n        styleImage: {\n          padding: '10px',\n          width: '100%'\n        }\n      }))) : __jsx(RowGrid, {\n        _data: dataChunk[1]\n      }), __jsx(RowGrid, {\n        _data: dataChunk[2]\n      }), lastDataChunk.length > 0 && lastDataChunk.map(v => __jsx(RowGrid, {\n        key: generateUuid(),\n        _data: v\n      })));\n    }\n\n    return __jsx(React.Fragment, null);\n  };\n\n  const actions = setFilter && total > 0 ? [total > limit && __jsx(Pagination, {\n    disabled: searching,\n    current: Math.round(offset / limit) + 1,\n    pageSize: limit,\n    total: total,\n    size: \"small\",\n    onChange: page => setFilter('offset', (page - 1) * limit),\n    showSizeChanger: false\n  })] : [];\n\n  if (render) {\n    /**\n     */\n    return __jsx(Card, {\n      className: \"performer-grid\",\n      title: title,\n      bordered: false,\n      hoverable: false,\n      bodyStyle: {\n        padding: '0'\n      },\n      actions: actions\n    }, __jsx(Loader, {\n      spinning: searching\n    }), data.length > 0 && data.map(performer => render(performer)));\n  }\n\n  return __jsx(React.Fragment, null, isPage && (topBanners === null || topBanners === void 0 ? void 0 : topBanners.length) > 0 && __jsx(Banner, {\n    banners: topBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }), __jsx(Card, {\n    className: \"performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    bodyStyle: {\n      padding: '0'\n    },\n    actions: actions\n  }, __jsx(Loader, {\n    spinning: searching\n  }), success // eslint-disable-next-line no-nested-ternary\n  && (total > 0 ? isPage ? renderGrid() : data.map(performer => __jsx(Col, {\n    xl: 6,\n    md: 8,\n    sm: 10,\n    xs: 16,\n    key: performer._id\n  }, __jsx(GridCard, {\n    key: performer === null || performer === void 0 ? void 0 : performer._id,\n    className: \"performer-box\",\n    performer: performer\n  }))) : __jsx(\"div\", {\n    className: \"ant-card-head\"\n  }, \"No model found.\"))), isPage && (bottomBanners === null || bottomBanners === void 0 ? void 0 : bottomBanners.length) > 0 && __jsx(Banner, {\n    banners: bottomBanners,\n    styleImage: {\n      padding: '10px',\n      width: '100%'\n    }\n  }));\n};\n\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  searching: false,\n  title: '',\n  onLike: null,\n  render: null,\n  isPage: false,\n  banners: {},\n  gridCard: null,\n  placeholderAvatarUrl: ''\n};\n\nconst bannerSelecter = state => state.banner.listBanners.data;\n\nconst filterBanner = createSelector(bannerSelecter, banners => {\n  if (!banners.length) return {};\n  return {\n    topBanners: banners.filter(b => b.position === 'top'),\n    rightBanners: banners.filter(b => b.position === 'right'),\n    bottomBanners: banners.filter(b => b.position === 'bottom')\n  };\n});\n\nconst mapStates = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n  banners: filterBanner(state)\n});\n\nexport default connect(mapStates)(PerformerGrid);","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/src/components/performer/performer-grid.tsx"],"names":["React","Link","Card","Space","Row","Col","Pagination","MaleSignIcon","FemaleSignIcon","TransgenderIcon","createSelector","HeartFilled","HeartOutlined","EyeOutlined","LockOutlined","chunk","Banner","Loader","connect","generateUuid","renderTitle","gender","name","marginRight","renderTags","tags","map","tag","pathname","query","PerformerGrid","data","searching","success","title","onLike","loggedIn","isPage","offset","limit","total","setFilter","banners","gridCard","placeholderAvatarUrl","render","defaultPlaceholderAvatarUrl","PerformerCard","performer","className","isOnline","streamingStatus","statusClassNames","status","push","_id","isBlocked","JSON","stringify","username","backgroundImage","avatar","length","join","stats","views","display","flexDirection","justifyContent","isFavorite","aboutMe","GridCard","RowGrid","_data","width","topBanners","rightBanners","bottomBanners","renderGrid","padding","dataChunk","lastDataChunk","slice","v","actions","Math","round","page","defaultProps","bannerSelecter","state","banner","listBanners","filterBanner","filter","b","position","mapStates","ui"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IPerformer, GENDER, IBanner } from 'src/interfaces';\nimport Link from 'next/link';\nimport {\n  Card, Space, Row, Col, Pagination\n} from 'antd';\nimport {\n  MaleSignIcon,\n  FemaleSignIcon,\n  TransgenderIcon\n} from '@components/common/base/icons';\nimport { createSelector } from 'src/lib';\nimport {\n  HeartFilled,\n  HeartOutlined,\n  EyeOutlined,\n  LockOutlined\n} from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\nimport { generateUuid } from '@lib/string';\n\ninterface IProps {\n  loggedIn?: boolean;\n  setFilter?: Function;\n  limit?: number;\n  offset?: number;\n  data: IPerformer[];\n  total?: number;\n  success?: boolean;\n  banners?: Record<string, IBanner[]>;\n  searching?: boolean;\n  title?: string | string[];\n  onLike?: Function;\n  isPage?: boolean;\n  gridCard?: React.ReactNode;\n  render?: (performer: IPerformer) => React.ReactNode;\n  placeholderAvatarUrl?: string;\n}\n\nconst renderTitle = (gender: GENDER, name: string) => (\n  <div className=\"p-title\">\n    <span style={{ marginRight: 5 }}>{name}</span>\n    {gender === 'male' ? (\n      <span className=\"anticon\">\n        <MaleSignIcon />\n      </span>\n    ) : gender === 'female' ? (\n      <span className=\"anticon\">\n        <FemaleSignIcon />\n      </span>\n    ) : (\n      <span className=\"anticon\">\n        <TransgenderIcon />\n      </span>\n    )}\n  </div>\n);\n\nconst renderTags = (tags: string[]) => (\n  <Space className=\"tags\" wrap size={[5, 2]}>\n    {tags.map((tag) => (\n      <Link\n        href={{ pathname: '/tag', query: { tags: tag } }}\n        key={tag}\n        as={`/tag/${tag}`}\n      >\n        <a>\n          #\n          {tag}\n        </a>\n      </Link>\n    ))}\n  </Space>\n);\n\ninterface IGridCard {\n  performer: IPerformer;\n  className: string;\n}\n\nconst PerformerGrid = ({\n  data,\n  searching,\n  success,\n  title,\n  onLike,\n  loggedIn,\n  isPage,\n  offset,\n  limit,\n  total,\n  setFilter,\n  banners,\n  gridCard,\n  placeholderAvatarUrl,\n  render\n}: IProps) => {\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n\n  const PerformerCard: React.FC<IGridCard> = ({\n    performer,\n    className\n  }: IGridCard) => {\n    const { isOnline, streamingStatus } = performer;\n    const statusClassNames = ['p-status'];\n    let status = 'offline';\n    if (isOnline) {\n      switch (streamingStatus) {\n        case 'private':\n          statusClassNames.push('private');\n          status = 'private chat';\n          break;\n        case 'group':\n          statusClassNames.push('group');\n          status = 'group chat';\n          break;\n        case 'public':\n          status = 'live';\n          statusClassNames.push('online');\n          break;\n        default:\n          status = 'online';\n          statusClassNames.push('online');\n          break;\n      }\n    } else {\n      statusClassNames.push('offline');\n    }\n\n    return (\n      <Card.Grid className={className} key={performer._id} hoverable={false}>\n        {performer.isBlocked && (\n          <div className=\"blocked-thumb\">\n            <LockOutlined />\n          </div>\n        )}\n        <Link\n          href={{\n            pathname: '/stream',\n            query: { performer: JSON.stringify(performer) }\n          }}\n          as={`/profile/${performer.username}`}\n        >\n          <a>\n            <div\n              className=\"performer-avatar\"\n              style={{\n                backgroundImage: `url(${\n                  typeof performer.avatar === 'string'\n                  && performer.avatar.length > 0\n                    ? performer.avatar\n                    : defaultPlaceholderAvatarUrl\n                })`\n              }}\n            >\n              <span className={statusClassNames.join(' ')}>{status}</span>\n              {renderTitle(performer.gender, performer.username)}\n              {performer?.stats?.views > 0 && (\n                <div className=\"p-viewer\">\n                  <EyeOutlined style={{ marginRight: 5 }} />\n                  <span>{performer.stats.views}</span>\n                </div>\n              )}\n            </div>\n          </a>\n        </Link>\n        <div className=\"performer-bottom\">\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between'\n            }}\n          >\n            <Col>\n              <div>{performer.tags && renderTags(performer.tags)}</div>\n            </Col>\n            <Col>\n              <div\n                aria-hidden\n                hidden={!loggedIn}\n                className=\"p-favorite\"\n                onClick={() => onLike(performer)}\n              >\n                {performer.isFavorite ? (\n                  <HeartFilled className=\"icon\" />\n                ) : (\n                  <HeartOutlined className=\"icon\" />\n                )}\n              </div>\n            </Col>\n          </div>\n          <div className=\"about-me\">{performer?.aboutMe}</div>\n        </div>\n      </Card.Grid>\n    );\n  };\n\n  const GridCard = gridCard || PerformerCard as any;\n\n  const RowGrid = ({ _data }: { _data: IPerformer[]}) => (\n    <Row style={{ width: '100%' }}>\n      {_data\n        && _data.length > 0\n        && _data.map((performer: IPerformer) => (\n          <GridCard\n            className=\"performer-box\"\n            key={performer._id}\n            performer={performer}\n          />\n        ))}\n    </Row>\n  );\n\n  const { topBanners, rightBanners, bottomBanners } = banners;\n  const renderGrid = () => {\n    const { length } = data;\n    if (length <= 12) {\n      return (\n        <Row style={{ width: '100%' }}>\n          {rightBanners && rightBanners.length > 0 ? (\n            <>\n              <Col lg={16} md={16} xs={24}>\n                <Row>\n                  {data\n                    && data.length > 0\n                    && data.map((performer: IPerformer) => (\n                      <GridCard\n                        className=\"performer-box performer-box-4-item\"\n                        key={performer._id}\n                        performer={performer}\n                      />\n                    ))}\n                </Row>\n              </Col>\n              <Col lg={8} md={8} xs={24}>\n                <Banner\n                  classnames=\"right-banners\"\n                  banners={rightBanners}\n                  styleImage={{ padding: '10px', width: '100%' }}\n                />\n              </Col>\n            </>\n          ) : (\n            data\n            && data.length > 0\n            && data.map((performer: IPerformer) => (\n              <GridCard\n                className=\"performer-box\"\n                key={performer._id}\n                performer={performer}\n              />\n            ))\n          )}\n        </Row>\n      );\n    }\n    if (length > 12 && length <= 24) {\n      const dataChunk = chunk(data, 12);\n      return (\n        <>\n          {rightBanners && rightBanners.length > 0 ? (\n            <>\n              <Row style={{ width: '100%' }}>\n                <Col lg={16} md={16} xs={24}>\n                  <Row>\n                    {dataChunk[0]\n                      && dataChunk[0].length > 0\n                      && dataChunk[0].map((performer: IPerformer) => (\n                        <GridCard\n                          className=\"performer-box performer-box-4-item\"\n                          key={performer._id}\n                          performer={performer}\n                        />\n                      ))}\n                  </Row>\n                </Col>\n                <Col lg={8} md={8} xs={24}>\n                  {rightBanners && rightBanners.length > 0 && (\n                    <Banner\n                      classnames=\"right-banners\"\n                      banners={rightBanners}\n                      styleImage={{ padding: '10px', width: '100%' }}\n                    />\n                  )}\n                </Col>\n              </Row>\n              <RowGrid\n                _data={dataChunk[1]}\n              />\n            </>\n          ) : (\n            <RowGrid\n              _data={data}\n            />\n          )}\n        </>\n      );\n    }\n    if (length > 24 && length <= 36) {\n      const dataChunk = chunk(data, 12);\n      return (\n        <>\n          <RowGrid\n            _data={dataChunk[0]}\n\n          />\n          {rightBanners && rightBanners.length > 0 ? (\n            <Row style={{ width: '100%' }}>\n              <Col xl={16} lg={18} md={18} xs={24}>\n                <Row>\n                  {dataChunk[1]\n                    && dataChunk[1].length > 0\n                    && dataChunk[1].map((performer: IPerformer) => (\n                      <GridCard\n                        className=\"performer-box performer-box-4-item\"\n                        key={performer._id}\n                        performer={performer}\n                      />\n                    ))}\n                </Row>\n              </Col>\n              <Col xl={8} lg={6} md={6} xs={24}>\n                <Banner\n                  classnames=\"right-banners\"\n                  banners={rightBanners}\n                  styleImage={{ padding: '10px', width: '100%' }}\n                />\n              </Col>\n            </Row>\n          ) : (\n            <RowGrid\n              _data={dataChunk[1]}\n            />\n          )}\n          <RowGrid\n            _data={dataChunk[2]}\n          />\n        </>\n      );\n    }\n    if (length > 36) {\n      const dataChunk = chunk(data, 12);\n      const lastDataChunk = dataChunk.slice(3);\n      return (\n        <>\n          <RowGrid\n            _data={dataChunk[0]}\n          />\n          {rightBanners && rightBanners.length > 0 ? (\n            <Row style={{ width: '100%' }}>\n              <Col xl={16} lg={18} md={18} xs={24}>\n                <Row>\n                  {dataChunk[1]\n                    && dataChunk[1].length > 0\n                    && dataChunk[1].map((performer: IPerformer) => (\n                      <GridCard\n                        className=\"performer-box performer-box-4-item\"\n                        key={performer._id}\n                        performer={performer}\n                      />\n                    ))}\n                </Row>\n              </Col>\n              <Col xl={8} lg={6} md={6} xs={24}>\n                <Banner\n                  classnames=\"right-banners\"\n                  banners={rightBanners}\n                  styleImage={{ padding: '10px', width: '100%' }}\n                />\n              </Col>\n            </Row>\n          ) : (\n            <RowGrid\n              _data={dataChunk[1]}\n            />\n          )}\n          <RowGrid _data={dataChunk[2]} />\n          {lastDataChunk.length > 0\n            && lastDataChunk.map((v) => (\n              <RowGrid key={generateUuid()} _data={v} />\n            ))}\n        </>\n      );\n    }\n    return <></>;\n  };\n\n  const actions = setFilter && total > 0\n    ? [\n      total > limit && (\n        <Pagination\n          disabled={searching}\n          current={Math.round(offset / limit) + 1}\n          pageSize={limit}\n          total={total}\n          size=\"small\"\n          onChange={(page) => setFilter('offset', (page - 1) * limit)}\n          showSizeChanger={false}\n        />\n      )\n    ]\n    : [];\n\n  if (render) {\n    /**\n     */\n    return (\n      <Card\n        className=\"performer-grid\"\n        title={title}\n        bordered={false}\n        hoverable={false}\n        bodyStyle={{ padding: '0' }}\n        actions={actions}\n      >\n        <Loader spinning={searching} />\n        {data.length > 0 && data.map((performer) => render(performer))}\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      {isPage && topBanners?.length > 0 && (\n        <Banner\n          banners={topBanners}\n          styleImage={{ padding: '10px', width: '100%' }}\n        />\n      )}\n      <Card\n        className=\"performer-grid\"\n        title={title}\n        bordered={false}\n        hoverable={false}\n        bodyStyle={{ padding: '0' }}\n        actions={actions}\n      >\n        <Loader spinning={searching} />\n        {success\n        // eslint-disable-next-line no-nested-ternary\n        && (total > 0 ? (\n          isPage ? (\n            renderGrid()\n          ) : (\n            data.map((performer) => (\n              <Col xl={6} md={8} sm={10} xs={16} key={performer._id}>\n                <GridCard\n                  key={performer?._id}\n                  className=\"performer-box\"\n                  performer={performer}\n                />\n              </Col>\n            ))\n          )\n        ) : (\n          <div className=\"ant-card-head\">No model found.</div>\n        ))}\n      </Card>\n      {isPage && bottomBanners?.length > 0 && (\n        <Banner\n          banners={bottomBanners}\n          styleImage={{ padding: '10px', width: '100%' }}\n        />\n      )}\n    </>\n  );\n};\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  searching: false,\n  title: '',\n  onLike: null,\n  render: null,\n  isPage: false,\n  banners: {},\n  gridCard: null,\n  placeholderAvatarUrl: ''\n};\n\nconst bannerSelecter = (state) => state.banner.listBanners.data;\nconst filterBanner = createSelector(bannerSelecter, (banners) => {\n  if (!banners.length) return {};\n\n  return {\n    topBanners: banners.filter((b) => b.position === 'top'),\n    rightBanners: banners.filter((b) => b.position === 'right'),\n    bottomBanners: banners.filter((b) => b.position === 'bottom')\n  };\n});\nconst mapStates = (state: any) => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n  banners: filterBanner(state)\n});\n\nexport default connect(mapStates)(PerformerGrid);\n"]},"metadata":{},"sourceType":"module"}