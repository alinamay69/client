{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-nested-ternary */\nimport React from 'react';\nimport { Form, Input, Col, Row, Select, Button } from 'antd';\nimport FormItem from 'antd/lib/form/FormItem';\nvar PAYMENT_INFO_TYPE = {\n  wireTransfer: 'Wire transfer (Free)',\n  paypal: 'Paypal',\n  check: 'Issue check (U.S only)'\n};\nvar PAYMENT_INFO_CURRENCY = {\n  eurEuro: 'EUR (Euro)',\n  usdUnitedStatesDollars: 'USD (U.S Dollar)'\n};\nvar Item = Form.Item;\nvar Option = Select.Option;\nvar initFormValue = {\n  type: 'wireTransfer',\n  withdrawCurrency: 'eurEuro',\n  taxPayer: ''\n};\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 6\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nvar tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 0\n    }\n  }\n};\nexport default (function (_ref) {\n  var onFinish = _ref.onFinish,\n      bankTransferOption = _ref.bankTransferOption,\n      loading = _ref.loading;\n\n  var _React$useState = React.useState(bankTransferOption.type || 'wireTransfer'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      withdrawType = _React$useState2[0],\n      setWithdrawType = _React$useState2[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  return __jsx(Form, _extends({}, formItemLayout, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: onFinish,\n    name: \"paymentInfoSettingForm\",\n    className: \"performerEditForm\",\n    initialValues: _objectSpread(_objectSpread({}, initFormValue), bankTransferOption)\n  }), __jsx(Row, null, __jsx(Col, {\n    xs: 24,\n    sm: 12\n  }, __jsx(Item, {\n    name: \"type\",\n    key: \"type\",\n    rules: [{\n      required: true\n    }],\n    label: \"Withdraw Type\"\n  }, __jsx(Select, {\n    onChange: function onChange(type) {\n      return [setWithdrawType(type)];\n    }\n  }, Object.keys(PAYMENT_INFO_TYPE).map(function (key) {\n    return __jsx(Option, {\n      value: key,\n      key: key\n    }, PAYMENT_INFO_TYPE[key]);\n  }))), __jsx(Item, {\n    name: \"withdrawCurrency\",\n    key: \"withdrawCurrency\",\n    rules: [{\n      required: true\n    }],\n    label: \"Withdraw Currency\"\n  }, __jsx(Select, null, Object.keys(PAYMENT_INFO_CURRENCY).map(function (key) {\n    return __jsx(Option, {\n      value: key,\n      key: key\n    }, PAYMENT_INFO_CURRENCY[key]);\n  }))), __jsx(Item, {\n    name: \"taxPayer\",\n    key: \"taxPayer\",\n    label: \"Taxpayer ID/SSN\"\n  }, __jsx(Input, null)), withdrawType === 'wireTransfer' ? [__jsx(Item, {\n    name: \"bankName\",\n    key: \"bankName\",\n    label: \"Bank Name\",\n    dependencies: ['type'],\n    rules: [function (_ref2) {\n      var getFieldValue = _ref2.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank name is requried.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankAddress\",\n    key: \"bankAddress\",\n    label: \"Bank Address\",\n    dependencies: ['type'],\n    rules: [function (_ref3) {\n      var getFieldValue = _ref3.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank address is requried.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankSWIFTBICABA\",\n    key: \"bankSWIFTBICABA\",\n    label: \"Bank SWIFT-BIC/ABA\",\n    dependencies: ['type'],\n    rules: [function (_ref4) {\n      var getFieldValue = _ref4.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank s w i f t b i c a b a is required.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"additionalInformation\",\n    key: \"additionalInformation\",\n    label: \"Additional Information\"\n  }, __jsx(Input.TextArea, null))] : withdrawType === 'paypal' ? __jsx(Item, {\n    name: \"payPalAccount\",\n    key: \"payPalAccount\",\n    label: \"PayPal Account\",\n    dependencies: ['type'],\n    rules: [function (_ref5) {\n      var getFieldValue = _ref5.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'paypal',\n        message: 'The paypal account is requried.'\n      };\n    }]\n  }, __jsx(Input, null)) : withdrawType === 'check' && __jsx(Item, {\n    name: \"checkPayable\",\n    key: \"checkPayable\",\n    label: \"Check Payable To\",\n    dependencies: ['type'],\n    rules: [function (_ref6) {\n      var getFieldValue = _ref6.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'check',\n        message: 'The check payable is required.'\n      };\n    }]\n  }, __jsx(Input, null))), __jsx(Col, {\n    xs: 24,\n    sm: 12\n  }, withdrawType === 'wireTransfer' && [__jsx(Item, {\n    name: \"bankCity\",\n    key: \"bankCity\",\n    label: \"Bank City\",\n    dependencies: ['type'],\n    rules: [function (_ref7) {\n      var getFieldValue = _ref7.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank city is requried.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankState\",\n    key: \"bankState\",\n    label: \"Bank State\",\n    dependencies: ['type'],\n    rules: [function (_ref8) {\n      var getFieldValue = _ref8.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank state is requried.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankZip\",\n    key: \"bankZip\",\n    label: \"Bank Zip\",\n    dependencies: ['type'],\n    rules: [function (_ref9) {\n      var getFieldValue = _ref9.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank zip is requried.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankCountry\",\n    key: \"bankCountry\",\n    label: \"Bank Country\",\n    dependencies: ['type'],\n    rules: [function (_ref10) {\n      var getFieldValue = _ref10.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank country is requried.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"bankAcountNumber\",\n    key: \"bankAcountNumber\",\n    label: \"Bank Account Number\",\n    dependencies: ['type'],\n    rules: [function (_ref11) {\n      var getFieldValue = _ref11.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The bank account number is requried.'\n      };\n    }]\n  }, __jsx(Input, null)), __jsx(Item, {\n    name: \"holderOfBankAccount\",\n    key: \"holderOfBankAccount\",\n    label: \"Primary Account Holder\",\n    dependencies: ['type'],\n    rules: [function (_ref12) {\n      var getFieldValue = _ref12.getFieldValue;\n      return {\n        required: getFieldValue('type') === 'wireTransfer',\n        message: 'The holder of bank account is required.'\n      };\n    }]\n  }, __jsx(Input, null))])), __jsx(FormItem, tailFormItemLayout, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: loading\n  }, \"Save Change\")));\n});","map":null,"metadata":{},"sourceType":"module"}