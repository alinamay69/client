{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { Button, Badge, message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport { streamService } from 'src/services';\nimport './index.less';\n\nclass Publisher extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      streamId: '',\n      processing: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      publish_started\n    } = this.props;\n    const {\n      processing\n    } = this.state;\n\n    if (processing && publish_started !== prevProps.publish_started) {\n      this.handleProcessing(false);\n    }\n  }\n\n  async handlePublishing(streamId) {\n    const {\n      webRTCAdaptor,\n      leaveSession,\n      settings\n    } = this.props;\n\n    try {\n      const token = await streamService.getPublishToken({\n        streamId,\n        settings\n      });\n      webRTCAdaptor.publish(streamId, token);\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n      leaveSession();\n    }\n  }\n\n  handleProcessing(processing) {\n    this.setState({\n      processing\n    });\n  }\n\n  handleOnOffStream() {\n    const {\n      publish_started,\n      webRTCAdaptor\n    } = this.props;\n    const {\n      streamId\n    } = this.state;\n\n    if (!streamId) {\n      return;\n    }\n\n    this.handleProcessing(true);\n\n    if (publish_started) {\n      webRTCAdaptor.stop(streamId);\n      return;\n    }\n\n    this.handlePublishing(streamId);\n  }\n\n  publish(streamId) {\n    const {\n      initialized\n    } = this.props;\n    this.setState({\n      streamId\n    });\n    initialized && this.handlePublishing(streamId);\n  }\n\n  start() {\n    const {\n      initWebRTCAdaptor\n    } = this.props;\n    initWebRTCAdaptor();\n  }\n\n  stop() {\n    window.location.reload();\n  }\n\n  render() {\n    const {\n      initialized,\n      publish_started\n    } = this.props;\n    const videoProps = {\n      id: 'publisher',\n      autoPlay: true,\n      muted: true,\n      controls: true,\n      playsInline: true,\n      width: '100%',\n      hidden: !publish_started\n    };\n    return __jsx(\"div\", {\n      style: {\n        minHeight: 300\n      },\n      className: \"text-center\"\n    }, initialized && __jsx(Button, {\n      type: \"default\",\n      onClick: this.stop.bind(this),\n      block: true,\n      className: \"mb-10\"\n    }, \"Stop Streaming\"), __jsx(\"video\", videoProps), publish_started && __jsx(Badge, {\n      status: \"success\",\n      text: __jsx(\"span\", {\n        className: \"badge-success\"\n      }, \"Publishing\")\n    }));\n  }\n\n}\n\nexport default withAntmedia(Publisher);","map":null,"metadata":{},"sourceType":"module"}