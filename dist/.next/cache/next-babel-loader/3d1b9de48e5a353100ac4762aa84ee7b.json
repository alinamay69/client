{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\nexport var CamAggregatorService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(CamAggregatorService, _APIRequest);\n\n  var _super = _createSuper(CamAggregatorService);\n\n  function CamAggregatorService() {\n    _classCallCheck(this, CamAggregatorService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CamAggregatorService, [{\n    key: \"online\",\n    value: function online(query) {\n      return this.get(this.buildUrl('/cam-aggregator/online', query));\n    }\n  }, {\n    key: \"categories\",\n    value: function categories(query) {\n      return this.get(this.buildUrl('/cam-aggregator/categories', query));\n    }\n  }, {\n    key: \"profile\",\n    value: function profile(username, service) {\n      var s = 's';\n\n      switch (service) {\n        case 'x':\n        case 'xlovecam':\n          s = 'x';\n          break;\n\n        case 'b':\n        case 'bongacams':\n          s = 'b';\n          break;\n\n        case 's':\n        case 'stripcash':\n          s = 's';\n          break;\n\n        case 'c':\n        case 'chaturbate':\n          s = 'c';\n          break;\n\n        default:\n          break;\n      }\n\n      return this.get(service ? \"/cam-aggregator/profile/\".concat(s, \"/\").concat(username) : \"/cam-aggregator/profile/\".concat(username));\n    }\n  }, {\n    key: \"related\",\n    value: function related(username) {\n      return this.get(\"/cam-aggregator/\".concat(username, \"/related\"));\n    }\n  }]);\n\n  return CamAggregatorService;\n}(APIRequest);\nexport var camAggregatorService = new CamAggregatorService();","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/src/services/cam-aggregator.service.ts"],"names":["APIRequest","CamAggregatorService","query","get","buildUrl","username","service","s","camAggregatorService"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AAEA,WAAaC,oBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,gBAAOC,KAAP,EAAmB;AACjB,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,wBAAd,EAAwCF,KAAxC,CAAT,CAAP;AACD;AAHH;AAAA;AAAA,WAKE,oBAAWA,KAAX,EAAuB;AACrB,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,4BAAd,EAA4CF,KAA5C,CAAT,CAAP;AACD;AAPH;AAAA;AAAA,WASE,iBAAQG,QAAR,EAA0BC,OAA1B,EAA4C;AAC1C,UAAIC,CAAC,GAAG,GAAR;;AACA,cAAQD,OAAR;AACE,aAAK,GAAL;AAAU,aAAK,UAAL;AACRC,UAAAA,CAAC,GAAG,GAAJ;AACA;;AACF,aAAK,GAAL;AAAU,aAAK,WAAL;AACRA,UAAAA,CAAC,GAAG,GAAJ;AACA;;AACF,aAAK,GAAL;AAAU,aAAK,WAAL;AACRA,UAAAA,CAAC,GAAG,GAAJ;AACA;;AACF,aAAK,GAAL;AAAU,aAAK,YAAL;AACRA,UAAAA,CAAC,GAAG,GAAJ;AACA;;AACF;AAAS;AAbX;;AAeA,aAAO,KAAKJ,GAAL,CAASG,OAAO,qCAA8BC,CAA9B,cAAmCF,QAAnC,sCAA2EA,QAA3E,CAAhB,CAAP;AACD;AA3BH;AAAA;AAAA,WA6BE,iBAAQA,QAAR,EAAkB;AAChB,aAAO,KAAKF,GAAL,2BAA4BE,QAA5B,cAAP;AACD;AA/BH;;AAAA;AAAA,EAA0CL,UAA1C;AAkCA,OAAO,IAAMQ,oBAAoB,GAAG,IAAIP,oBAAJ,EAA7B","sourcesContent":["import { APIRequest } from './api-request';\n\nexport class CamAggregatorService extends APIRequest {\n  online(query: any) {\n    return this.get(this.buildUrl('/cam-aggregator/online', query as any));\n  }\n\n  categories(query: any) {\n    return this.get(this.buildUrl('/cam-aggregator/categories', query as any));\n  }\n\n  profile(username: string, service?: string) {\n    let s = 's';\n    switch (service) {\n      case 'x': case 'xlovecam':\n        s = 'x';\n        break;\n      case 'b': case 'bongacams':\n        s = 'b';\n        break;\n      case 's': case 'stripcash':\n        s = 's';\n        break;\n      case 'c': case 'chaturbate':\n        s = 'c';\n        break;\n      default: break;\n    }\n    return this.get(service ? `/cam-aggregator/profile/${s}/${username}` : `/cam-aggregator/profile/${username}`);\n  }\n\n  related(username) {\n    return this.get(`/cam-aggregator/${username}/related`);\n  }\n}\n\nexport const camAggregatorService = new CamAggregatorService();\n"]},"metadata":{},"sourceType":"module"}