{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport videojs from 'video.js';\nconst Button = videojs.getComponent('Button');\n\nclass AudioMuteToggleButton extends Button {\n  constructor(player, options) {\n    super(player, options);\n\n    _defineProperty(this, \"initialized\", false);\n\n    _defineProperty(this, \"isMicMuted\", false);\n\n    _defineProperty(this, \"_options\", void 0);\n\n    this._options = options;\n\n    if (typeof this._options.isMicMuted !== 'undefined') {\n      this.isMicMuted = this._options.isMicMuted;\n    }\n\n    if (player.readyState()) {\n      this.initialized = true;\n      const text = this.isMicMuted ? 'Unmute Local Mic' : 'Mute Local Mic';\n      this.controlText(text);\n    }\n\n    this.on(player, 'timeupdate', () => {\n      if (this.initialized) {\n        this.update();\n      }\n    });\n  }\n\n  update() {}\n\n  buildCSSClass() {\n    return `vjs-audio  ${super.buildCSSClass()}`;\n  }\n\n  handleClick() {\n    const {\n      muteLocalMic,\n      unmuteLocalMic\n    } = this._options;\n\n    if (this.initialized) {\n      const audio = document.querySelector('.vjs-audio');\n      audio.classList.toggle('vjs-audio-off');\n      let controlText = '';\n\n      if (this.isMicMuted) {\n        unmuteLocalMic();\n        controlText = 'Mute Local Mic';\n      } else {\n        muteLocalMic();\n        controlText = 'Unmute Local Mic';\n      }\n\n      if (this.controlText() !== controlText) {\n        this.controlText(controlText);\n      }\n\n      this.isMicMuted = !this.isMicMuted;\n    }\n  }\n\n}\n\nvideojs.registerComponent('AudioMuteToggleButton', AudioMuteToggleButton);\nexport default AudioMuteToggleButton;","map":null,"metadata":{},"sourceType":"module"}