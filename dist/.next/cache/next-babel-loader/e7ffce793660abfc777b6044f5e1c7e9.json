{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { connect } from 'react-redux';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateCurrentStudio } from '@redux/studio/actions';\nimport { favouriteService } from 'src/services';\nimport { message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport Router, { withRouter } from 'next/router';\nimport { getBanners } from '@redux/banner/actions';\nimport { createSelector } from 'reselect';\nimport { SocketContext } from 'src/socket';\nimport Head from 'next/head';\nimport { camAggregatorService } from '@services/cam-aggregator.service';\nimport AggregatorFilter from '@components/cam-aggregator/aggregator-filter';\nimport AggregatorProfileGridCard from '@components/cam-aggregator/grid-card';\nimport Loader from '@components/common/base/loader';\nvar initQueryState = {\n  offset: 0,\n  limit: 60,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc',\n  q: ''\n};\n\nvar CamAggregator = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CamAggregator, _PureComponent);\n\n  var _super = _createSuper(CamAggregator);\n\n  function CamAggregator(props) {\n    var _this;\n\n    _classCallCheck(this, CamAggregator);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"search\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n        var query, resp, err;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _this.state.query;\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.setState({\n                  loading: true\n                });\n\n              case 4:\n                _context.next = 6;\n                return camAggregatorService.online(_objectSpread(_objectSpread({}, query), params || {}));\n\n              case 6:\n                resp = _context.sent;\n\n                _this.setState({\n                  performers: resp.data.data,\n                  total: resp.data.count\n                });\n\n                _context.next = 16;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 14;\n                return Promise.resolve(_context.t0);\n\n              case 14:\n                err = _context.sent;\n                message.error(getResponseError(err));\n\n              case 16:\n                _context.prev = 16;\n\n                _this.setState({\n                  loading: false\n                });\n\n                return _context.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10, 16, 19]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      query: initQueryState,\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(CamAggregator, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _router$query, _router$query2;\n\n        var router;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                router = this.props.router;\n                this.search({\n                  tag: ((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.tag) || '',\n                  q: ((_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.q) || ''\n                });\n                this.getCamAggregatorCategories();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevStates) {\n      var router = this.props.router;\n      var query = this.state.query;\n\n      if (router.query.q !== prevProps.router.query.q || query !== prevStates.query) {\n        var _router$query3, _router$query4;\n\n        var q = {\n          tag: ((_router$query3 = router.query) === null || _router$query3 === void 0 ? void 0 : _router$query3.tag) || '',\n          q: ((_router$query4 = router.query) === null || _router$query4 === void 0 ? void 0 : _router$query4.q) || ''\n        };\n        if (router.query.q !== prevProps.router.query.q) q.offset = 0;\n        this.search(q);\n      }\n\n      if (router.query.category !== prevProps.router.query.category) {\n        this.setQuery('category', router.query.category || '');\n      }\n    }\n  }, {\n    key: \"onLike\",\n    value: function () {\n      var _onLike = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(performer) {\n        var dispatchUpdatePerformerFavorite, _id, isFavorite, e;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatchUpdatePerformerFavorite = this.props.updatePerformerFavourite;\n                _id = performer._id, isFavorite = performer.isFavorite;\n                _context3.prev = 2;\n                _context3.next = 5;\n                return favouriteService.favorite(_id, isFavorite);\n\n              case 5:\n                dispatchUpdatePerformerFavorite(_id);\n                _context3.next = 14;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](2);\n                _context3.next = 12;\n                return Promise.resolve(_context3.t0);\n\n              case 12:\n                e = _context3.sent;\n                message.error(getResponseError(e));\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 8]]);\n      }));\n\n      function onLike(_x2) {\n        return _onLike.apply(this, arguments);\n      }\n\n      return onLike;\n    }()\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(name, value) {\n      var query = this.state.query;\n\n      if (name === 'category' && value !== query.category) {\n        Router.push({\n          pathname: '/cams',\n          query: {\n            category: value\n          }\n        }, \"/cams?category=\".concat(value));\n        return;\n      }\n\n      this.setState({\n        query: _objectSpread(_objectSpread({}, query), {}, _defineProperty({}, name, value))\n      });\n    }\n  }, {\n    key: \"setQuery\",\n    value: function setQuery(name, value) {\n      var query = this.state.query;\n      this.setState({\n        query: _objectSpread(_objectSpread({}, query), {}, _defineProperty({}, name, value))\n      });\n    }\n  }, {\n    key: \"getCamAggregatorCategories\",\n    value: function () {\n      var _getCamAggregatorCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return camAggregatorService.categories({});\n\n              case 2:\n                resp = _context4.sent;\n                _context4.next = 5;\n                return this.setState({\n                  categories: resp.data\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getCamAggregatorCategories() {\n        return _getCamAggregatorCategories.apply(this, arguments);\n      }\n\n      return getCamAggregatorCategories;\n    }()\n  }, {\n    key: \"clearFilter\",\n    value: function clearFilter() {\n      this.setState({\n        query: initQueryState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          ui = _this$props.ui,\n          countries = _this$props.countries;\n      var _this$state = this.state,\n          query = _this$state.query,\n          _this$state$performer = _this$state.performers,\n          performers = _this$state$performer === void 0 ? [] : _this$state$performer,\n          categories = _this$state.categories,\n          total = _this$state.total,\n          loading = _this$state.loading;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, ui === null || ui === void 0 ? void 0 : ui.siteName, ' ', \"| Cams\")), __jsx(\"div\", {\n        className: \"homepage\"\n      }, __jsx(AggregatorFilter, _extends({\n        categories: categories,\n        countries: countries,\n        setFilter: this.setFilter.bind(this),\n        clearFilter: this.clearFilter.bind(this)\n      }, query)), __jsx(Loader, {\n        spinning: loading,\n        fullScreen: true\n      }), __jsx(PerformerGrid, _extends({}, this.props, {\n        data: performers,\n        total: total,\n        success: true,\n        onLike: this.onLike.bind(this),\n        title: \"Live cams\",\n        isPage: true,\n        setFilter: this.setFilter.bind(this),\n        gridCard: AggregatorProfileGridCard\n      }, query))));\n    }\n  }]);\n\n  return CamAggregator;\n}(PureComponent);\n\n_defineProperty(CamAggregator, \"layout\", 'public');\n\n_defineProperty(CamAggregator, \"authenticate\", false);\n\nvar bannerSelecter = function bannerSelecter(state) {\n  return state.banner.listBanners.data;\n};\n\nvar filterBanner = createSelector(bannerSelecter, function (banners) {\n  if (!banners.length) return {};\n  return {\n    topBanners: banners.filter(function (b) {\n      return b.position === 'top';\n    }),\n    rightBanners: banners.filter(function (b) {\n      return b.position === 'right';\n    }),\n    bottomBanners: banners.filter(function (b) {\n      return b.position === 'bottom';\n    })\n  };\n});\nCamAggregator.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread({\n    ui: _objectSpread({}, state.ui)\n  }, state.performer.performers), {}, {\n    banners: filterBanner(state),\n    countries: state.settings.countries,\n    loggedIn: state.auth.loggedIn // categories: state.performer.categories.data\n\n  });\n};\n\nvar mapDispatch = {\n  getBanners: getBanners,\n  updateCurrentUser: updateCurrentUser,\n  updateCurrentStudio: updateCurrentStudio,\n  loginSuccess: loginSuccess\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(CamAggregator));","map":null,"metadata":{},"sourceType":"module"}