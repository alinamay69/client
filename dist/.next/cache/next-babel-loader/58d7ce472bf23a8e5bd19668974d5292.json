{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport { defaultColor } from 'src/lib';\nimport { Card, Space } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nexport var renderTitle = function renderTitle(gender, name) {\n  return __jsx(\"div\", {\n    className: \"p-title\"\n  }, __jsx(\"span\", {\n    style: {\n      marginRight: 5\n    }\n  }, name), gender === 'male' ? __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(MaleSignIcon, null)) : gender === 'female' ? __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(TransgenderIcon, null)));\n};\n\nvar renderCountry = function renderCountry(country) {\n  return country && __jsx(\"span\", {\n    className: \"model-flag\"\n  }, country.flag, ' ', country.name);\n};\n\nexport var renderTags = function renderTags(tags) {\n  var newTags = (tags === null || tags === void 0 ? void 0 : tags.length) > 4 ? tags.splice(0, 4) : tags;\n  return __jsx(Space, {\n    className: \"tags\"\n  }, newTags === null || newTags === void 0 ? void 0 : newTags.map(function (tag) {\n    return __jsx(Link, {\n      href: {\n        pathname: '/tag',\n        query: {\n          tags: tag\n        }\n      },\n      key: tag,\n      as: \"/tag/\".concat(tag)\n    }, __jsx(\"a\", null, \"#\", tag));\n  }));\n};\n\nvar GridCard = function GridCard(_ref) {\n  var _performer$stats;\n\n  var performer = _ref.performer,\n      loggedIn = _ref.loggedIn,\n      onLike = _ref.onLike,\n      className = _ref.className,\n      placeholderAvatarUrl = _ref.placeholderAvatarUrl,\n      countries = _ref.countries;\n  var isOnline = performer.isOnline,\n      streamingStatus = performer.streamingStatus;\n  var statusClassNames = ['p-status'];\n  var country = countries.find(function (c) {\n    return c.code === performer.country;\n  });\n  var status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  var defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, performer.isBlocked && __jsx(\"div\", {\n    className: \"blocked-thumb\"\n  }, __jsx(LockOutlined, null)), __jsx(Link, {\n    href: {\n      pathname: '/stream',\n      query: {\n        performer: JSON.stringify(performer)\n      }\n    },\n    as: \"/profile/\".concat(performer.username)\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\",\n    style: {\n      backgroundImage: \"url(\".concat(typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl, \")\")\n    }\n  }, __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), renderTitle(performer.gender, performer.username), renderCountry(country), (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n    className: \"p-viewer\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    }\n  }, __jsx(\"div\", null, performer.tags && renderTags(performer.tags)), __jsx(\"div\", {\n    \"aria-hidden\": true,\n    hidden: !loggedIn,\n    style: {\n      cursor: 'pointer',\n      color: defaultColor.primaryColor\n    },\n    onClick: function onClick() {\n      return onLike(performer);\n    }\n  }, performer.isFavorite ? __jsx(HeartFilled, {\n    className: \"icon\"\n  }) : __jsx(HeartOutlined, {\n    className: \"icon\"\n  }))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\nvar mapState = function mapState(state) {\n  return {\n    countries: state.settings.countries\n  };\n};\n\nexport default connect(mapState)(GridCard);","map":null,"metadata":{},"sourceType":"module"}