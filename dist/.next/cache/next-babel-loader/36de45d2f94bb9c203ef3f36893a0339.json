{"ast":null,"code":"import { APIRequest } from './api-request';\nimport env from '../env';\nexport class UserService extends APIRequest {\n  me(headers) {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload) {\n    return this.put('/users', payload);\n  }\n\n  getAvatarUploadUrl(userId) {\n    if (userId) {\n      return `${env.apiEndpoint}/users/${userId}/avatar/upload`;\n    }\n\n    return `${env.apiEndpoint}/users/avatar/upload`;\n  }\n\n  search(query) {\n    return this.get(this.buildUrl('/users/search', query));\n  }\n\n  findById(id) {\n    return this.get(`/users/view/${id}`);\n  }\n\n}\nexport const userService = new UserService();","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/src/services/user.service.ts"],"names":["APIRequest","env","UserService","me","headers","get","updateMe","payload","put","getAvatarUploadUrl","userId","apiEndpoint","search","query","buildUrl","findById","id","userService"],"mappings":"AACA,SAASA,UAAT,QAAsC,eAAtC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,OAAO,MAAMC,WAAN,SAA0BF,UAA1B,CAAqC;AAC1CG,EAAAA,EAAE,CAACC,OAAD,EAAiE;AACjE,WAAO,KAAKC,GAAL,CAAS,WAAT,EAAsBD,OAAtB,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACC,OAAD,EAAe;AACrB,WAAO,KAAKC,GAAL,CAAS,QAAT,EAAmBD,OAAnB,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAACC,MAAD,EAAkB;AAClC,QAAIA,MAAJ,EAAY;AACV,aAAQ,GAAET,GAAG,CAACU,WAAY,UAASD,MAAO,gBAA1C;AACD;;AACD,WAAQ,GAAET,GAAG,CAACU,WAAY,sBAA1B;AACD;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAiC;AACrC,WAAO,KAAKR,GAAL,CAAS,KAAKS,QAAL,CAAc,eAAd,EAA+BD,KAA/B,CAAT,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACC,EAAD,EAAa;AACnB,WAAO,KAAKX,GAAL,CAAU,eAAcW,EAAG,EAA3B,CAAP;AACD;;AAtByC;AAyB5C,OAAO,MAAMC,WAAW,GAAG,IAAIf,WAAJ,EAApB","sourcesContent":["import { IUser } from 'src/interfaces';\nimport { APIRequest, IResponse } from './api-request';\nimport env from '../env';\n\nexport class UserService extends APIRequest {\n  me(headers?: { [key: string]: string }): Promise<IResponse<IUser>> {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload: any) {\n    return this.put('/users', payload);\n  }\n\n  getAvatarUploadUrl(userId?: string) {\n    if (userId) {\n      return `${env.apiEndpoint}/users/${userId}/avatar/upload`;\n    }\n    return `${env.apiEndpoint}/users/avatar/upload`;\n  }\n\n  search(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/users/search', query));\n  }\n\n  findById(id: string) {\n    return this.get(`/users/view/${id}`);\n  }\n}\n\nexport const userService = new UserService();\n"]},"metadata":{},"sourceType":"module"}