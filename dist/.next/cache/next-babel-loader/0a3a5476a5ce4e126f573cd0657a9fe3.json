{"ast":null,"code":"var _this = this;\n\nvar __jsx = React.createElement;\nimport { Table, Tag } from 'antd';\nimport React from 'react';\nimport { formatDate } from 'src/lib';\nexport var TransactionHistoryTable = function TransactionHistoryTable(_ref) {\n  var transactions = _ref.transactions,\n      rowKey = _ref.rowKey,\n      pageSize = _ref.pageSize,\n      total = _ref.total,\n      onChange = _ref.onChange;\n  var columns = [{\n    title: 'Transaction ID',\n    dataIndex: '_id',\n    key: '_id',\n    render: function render(_id) {\n      return (_id === null || _id === void 0 ? void 0 : _id.slice(16, 24).toUpperCase()) || 'N/A';\n    }\n  }, {\n    title: 'Products',\n    dataIndex: 'products',\n    key: 'products',\n    render: function render(products) {\n      return (products || []).map(function (product) {\n        var _product$description;\n\n        return __jsx(\"p\", null, __jsx(\"strong\", null, product.name), ' ', __jsx(\"br\", null), __jsx(\"small\", null, (product === null || product === void 0 ? void 0 : (_product$description = product.description) === null || _product$description === void 0 ? void 0 : _product$description.slice(0, 150)) || ''));\n      });\n    }\n  }, {\n    title: 'Price',\n    dataIndex: 'totalPrice',\n    key: 'totalPrice',\n    align: 'center',\n    sorter: true,\n    render: function render(totalPrice) {\n      return (totalPrice === null || totalPrice === void 0 ? void 0 : totalPrice.toFixed(2)) || 'N/A';\n    }\n  }, {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    filters: [{\n      text: 'Success',\n      value: 'success'\n    }, {\n      text: 'Pending',\n      value: 'pending'\n    }, {\n      text: 'Canceled',\n      value: 'canceled'\n    }],\n    onFilter: function onFilter(value, record) {\n      return record.status.includes(value);\n    },\n    render: function render(status) {\n      switch (status) {\n        case 'success':\n          return __jsx(Tag, {\n            color: \"green\"\n          }, \"Success\");\n\n        case 'pending':\n          return __jsx(Tag, {\n            color: \"warning\"\n          }, \"Pending\");\n\n        case 'canceled':\n          return __jsx(Tag, {\n            color: \"default\"\n          }, \"Canceled\");\n\n        default:\n          return __jsx(Tag, {\n            color: \"default\"\n          }, \"Canceled\");\n      }\n    }\n  }, {\n    title: 'Created At',\n    dataIndex: 'createdAt',\n    sorter: true,\n    key: 'createdAt',\n    render: function render(date) {\n      return __jsx(\"span\", null, formatDate(date));\n    }\n  }];\n  return __jsx(Table, {\n    columns: columns,\n    rowKey: rowKey,\n    dataSource: transactions,\n    pagination: {\n      total: total,\n      pageSize: pageSize\n    },\n    onChange: onChange.bind(_this)\n  });\n};\n_c = TransactionHistoryTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionHistoryTable\");","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/src/components/transaction/table-list.tsx"],"names":["Table","Tag","React","formatDate","TransactionHistoryTable","transactions","rowKey","pageSize","total","onChange","columns","title","dataIndex","key","render","_id","slice","toUpperCase","products","map","product","name","description","align","sorter","totalPrice","toFixed","filters","text","value","onFilter","record","status","includes","date","bind"],"mappings":"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","sourcesContent":["import {\n  Table, Tag\n} from 'antd';\nimport React from 'react';\nimport { IProduct, ITransaction } from 'src/interfaces';\nimport { formatDate } from 'src/lib';\n\ninterface IProps {\n  transactions: ITransaction[];\n  rowKey: string;\n  pageSize: number;\n  total: number;\n  onChange: Function;\n}\n\nexport const TransactionHistoryTable = ({\n  transactions,\n  rowKey,\n  pageSize,\n  total,\n  onChange\n}: IProps) => {\n  const columns = [\n    {\n      title: 'Transaction ID',\n      dataIndex: '_id',\n      key: '_id',\n      render: (_id: string) => _id?.slice(16, 24).toUpperCase() || 'N/A'\n    },\n    {\n      title: 'Products',\n      dataIndex: 'products',\n      key: 'products',\n      render(products: IProduct[]) {\n        return (products || []).map((product) => (\n          <p>\n            <strong>{product.name}</strong>\n            {' '}\n            <br />\n            <small>{product?.description?.slice(0, 150) || ''}</small>\n          </p>\n        ));\n      }\n    },\n    {\n      title: 'Price',\n      dataIndex: 'totalPrice',\n      key: 'totalPrice',\n      align: 'center' as 'center',\n      sorter: true,\n      render: (totalPrice: number) => totalPrice?.toFixed(2) || 'N/A'\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      filters: [\n        { text: 'Success', value: 'success' },\n        { text: 'Pending', value: 'pending' },\n        { text: 'Canceled', value: 'canceled' }\n      ],\n      onFilter: (value, record) => record.status.includes(value),\n      render(status: string) {\n        switch (status) {\n          case 'success':\n            return <Tag color=\"green\">Success</Tag>;\n          case 'pending':\n            return <Tag color=\"warning\">Pending</Tag>;\n          case 'canceled':\n            return <Tag color=\"default\">Canceled</Tag>;\n          default:\n            return <Tag color=\"default\">Canceled</Tag>;\n        }\n      }\n    },\n    {\n      title: 'Created At',\n      dataIndex: 'createdAt',\n      sorter: true,\n      key: 'createdAt',\n      render(date: Date) {\n        return <span>{formatDate(date)}</span>;\n      }\n    }\n  ];\n  return (\n    <Table\n      columns={columns}\n      rowKey={rowKey}\n      dataSource={transactions}\n      pagination={{ total, pageSize }}\n      onChange={onChange.bind(this)}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}