{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport { generateUuid } from '@lib/string';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Player from '@components/streaming/ant-video-player';\nimport { Button } from 'antd';\n\nclass Xcams extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"playerRefs\", {});\n\n    _defineProperty(this, \"state\", {\n      streamIds: []\n    });\n  }\n\n  componentDidMount() {\n    const {\n      streamIds\n    } = this.state;\n    const arr = [...streamIds];\n\n    for (let i = 0; i < 5; i += 1) {\n      arr.push(generateUuid());\n    }\n\n    this.setState({\n      streamIds: arr\n    });\n  }\n\n  play() {\n    Object.keys(this.playerRefs).forEach(id => {\n      var _this$playerRefs$id;\n\n      (_this$playerRefs$id = this.playerRefs[id]) === null || _this$playerRefs$id === void 0 ? void 0 : _this$playerRefs$id.playHLS(id);\n    });\n  }\n\n  render() {\n    const {\n      streamIds\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Button, {\n      type: \"primary\",\n      onClick: this.play.bind(this),\n      disabled: true\n    }, \"Play\"), streamIds.length > 0 && streamIds.map(id => __jsx(Player, _extends({}, this.props, {\n      sessionId: id,\n      configs: {\n        isPlayMode: true\n      },\n      ref: ref => this.playerRefs[id] = ref\n    }))));\n  }\n\n}\n\nconst mapStateProps = state => _objectSpread({}, state.streaming);\n\nexport default connect(mapStateProps)(Xcams);","map":null,"metadata":{},"sourceType":"module"}