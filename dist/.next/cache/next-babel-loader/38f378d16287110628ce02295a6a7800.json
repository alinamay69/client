{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport { defaultColor } from 'src/lib';\nimport { Card, Space } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nexport var renderTitle = function renderTitle(gender, name) {\n  return __jsx(\"div\", {\n    className: \"p-title\"\n  }, __jsx(\"span\", {\n    style: {\n      marginRight: 5\n    }\n  }, name), gender === 'male' ? __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(MaleSignIcon, null)) : gender === 'female' ? __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(TransgenderIcon, null)));\n};\n\nvar renderCountry = function renderCountry(country) {\n  return country && __jsx(\"span\", {\n    className: \"model-flag\"\n  }, country.flag, ' ', country.name);\n};\n\nexport var renderTags = function renderTags(tags) {\n  var newTags = (tags === null || tags === void 0 ? void 0 : tags.length) > 4 ? tags.splice(0, 4) : tags;\n  return __jsx(Space, {\n    className: \"tags\"\n  }, newTags === null || newTags === void 0 ? void 0 : newTags.map(function (tag) {\n    return __jsx(Link, {\n      href: {\n        pathname: '/tag',\n        query: {\n          tags: tag\n        }\n      },\n      key: tag,\n      as: \"/tag/\".concat(tag)\n    }, __jsx(\"a\", null, \"#\", tag));\n  }));\n};\n\nvar GridCard = function GridCard(_ref) {\n  var _performer$stats;\n\n  var performer = _ref.performer,\n      loggedIn = _ref.loggedIn,\n      onLike = _ref.onLike,\n      className = _ref.className,\n      placeholderAvatarUrl = _ref.placeholderAvatarUrl,\n      countries = _ref.countries;\n  var isOnline = performer.isOnline,\n      streamingStatus = performer.streamingStatus;\n  var statusClassNames = ['p-status'];\n  var country = countries.find(function (c) {\n    return c.code === performer.country;\n  });\n  var status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  var defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, performer.isBlocked && __jsx(\"div\", {\n    className: \"blocked-thumb\"\n  }, __jsx(LockOutlined, null)), __jsx(Link, {\n    href: {\n      pathname: '/stream',\n      query: {\n        performer: JSON.stringify(performer)\n      }\n    },\n    as: \"/profile/\".concat(performer.username)\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\",\n    style: {\n      backgroundImage: \"url(\".concat(typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl, \")\")\n    }\n  }, __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), renderTitle(performer.gender, performer.username), renderCountry(country), (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n    className: \"p-viewer\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    }\n  }, __jsx(\"div\", null, performer.tags && renderTags(performer.tags)), __jsx(\"div\", {\n    \"aria-hidden\": true,\n    hidden: !loggedIn,\n    style: {\n      cursor: 'pointer',\n      color: defaultColor.primaryColor\n    },\n    onClick: function onClick() {\n      return onLike(performer);\n    }\n  }, performer.isFavorite ? __jsx(HeartFilled, {\n    className: \"icon\"\n  }) : __jsx(HeartOutlined, {\n    className: \"icon\"\n  }))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\n_c = GridCard;\n\nvar mapState = function mapState(state) {\n  return {\n    countries: state.settings.countries\n  };\n};\n\nexport default connect(mapState)(GridCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"GridCard\");","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/src/components/performer/performer-grid-card.tsx"],"names":["HeartFilled","HeartOutlined","EyeOutlined","LockOutlined","defaultColor","Card","Space","MaleSignIcon","FemaleSignIcon","TransgenderIcon","Link","connect","renderTitle","gender","name","marginRight","renderCountry","country","flag","renderTags","tags","newTags","length","splice","map","tag","pathname","query","GridCard","performer","loggedIn","onLike","className","placeholderAvatarUrl","countries","isOnline","streamingStatus","statusClassNames","find","c","code","status","push","defaultPlaceholderAvatarUrl","_id","isBlocked","JSON","stringify","username","backgroundImage","avatar","join","stats","views","display","flexDirection","justifyContent","cursor","color","primaryColor","isFavorite","aboutMe","mapState","state","settings"],"mappings":"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","sourcesContent":["import {\n  IPerformer, ICountries, GENDER\n} from 'src/interfaces';\nimport {\n  HeartFilled,\n  HeartOutlined,\n  EyeOutlined,\n  LockOutlined\n} from '@ant-design/icons';\nimport { defaultColor } from 'src/lib';\nimport {\n  Card, Space\n} from 'antd';\nimport {\n  MaleSignIcon,\n  FemaleSignIcon,\n  TransgenderIcon\n} from '@components/common/base/icons';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\n\ninterface IGridCard {\n    performer: IPerformer;\n    loggedIn: boolean;\n    onLike: any;\n    className: string;\n    placeholderAvatarUrl: string;\n    // eslint-disable-next-line react/require-default-props\n    countries?: ICountries[];\n}\n\nexport const renderTitle = (gender: GENDER, name: string) => (\n  <div className=\"p-title\">\n    <span style={{ marginRight: 5 }}>{name}</span>\n    {gender === 'male' ? (\n      <span className=\"anticon\">\n        <MaleSignIcon />\n      </span>\n    ) : gender === 'female' ? (\n      <span className=\"anticon\">\n        <FemaleSignIcon />\n      </span>\n    ) : (\n      <span className=\"anticon\">\n        <TransgenderIcon />\n      </span>\n    )}\n  </div>\n);\n\nconst renderCountry = (country: ICountries) => country && (\n<span className=\"model-flag\">\n  {country.flag}\n  {' '}\n  {country.name}\n</span>\n);\n\nexport const renderTags = (tags: string[]) => {\n  const newTags = tags?.length > 4 ? tags.splice(0, 4) : tags;\n  return (\n    <Space className=\"tags\">\n      {newTags?.map((tag) => (\n        <Link\n          href={{ pathname: '/tag', query: { tags: tag } }}\n          key={tag}\n          as={`/tag/${tag}`}\n        >\n          <a>\n            #\n            {tag}\n          </a>\n        </Link>\n      ))}\n    </Space>\n  );\n};\n\nconst GridCard = ({\n  performer,\n  loggedIn,\n  onLike,\n  className,\n  placeholderAvatarUrl,\n  countries\n}: IGridCard) => {\n  const { isOnline, streamingStatus } = performer;\n  const statusClassNames = ['p-status'];\n  const country = countries.find((c) => c.code === performer.country);\n  let status = 'offline';\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n\n  return (\n    <Card.Grid className={className} key={performer._id} hoverable={false}>\n      {performer.isBlocked && (\n        <div className=\"blocked-thumb\">\n          <LockOutlined />\n        </div>\n      )}\n      <Link\n        href={{\n          pathname: '/stream',\n          query: { performer: JSON.stringify(performer) }\n        }}\n        as={`/profile/${performer.username}`}\n      >\n        <a>\n          <div\n            className=\"performer-avatar\"\n            style={{\n              backgroundImage: `url(${typeof performer.avatar === 'string'\n                                    && performer.avatar.length > 0\n                ? performer.avatar\n                : defaultPlaceholderAvatarUrl\n              })`\n            }}\n          >\n            <span className={statusClassNames.join(' ')}>{status}</span>\n            {renderTitle(performer.gender, performer.username)}\n            {renderCountry(country)}\n            {performer?.stats?.views > 0 && (\n            <div className=\"p-viewer\">\n              <EyeOutlined style={{ marginRight: 5 }} />\n              <span>{performer.stats.views}</span>\n            </div>\n            )}\n          </div>\n        </a>\n      </Link>\n      <div className=\"performer-bottom\">\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between'\n          }}\n        >\n          <div>{performer.tags && renderTags(performer.tags)}</div>\n          <div\n            aria-hidden\n            hidden={!loggedIn}\n            style={{\n              cursor: 'pointer',\n              color: defaultColor.primaryColor\n            }}\n            onClick={() => onLike(performer)}\n          >\n            {performer.isFavorite ? (\n              <HeartFilled className=\"icon\" />\n            ) : (\n              <HeartOutlined className=\"icon\" />\n            )}\n          </div>\n        </div>\n        <div className=\"about-me\">{performer?.aboutMe}</div>\n      </div>\n    </Card.Grid>\n  );\n};\n\nconst mapState = (state) => ({\n  countries: state.settings.countries\n});\n\nexport default connect(mapState)(GridCard);\n"]},"metadata":{},"sourceType":"module"}