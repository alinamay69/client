{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { connect } from 'react-redux';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateCurrentStudio } from '@redux/studio/actions';\nimport { favouriteService } from 'src/services';\nimport { message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport Router, { withRouter } from 'next/router';\nimport { getBanners } from '@redux/banner/actions';\nimport { createSelector } from 'reselect';\nimport { SocketContext } from 'src/socket';\nimport Head from 'next/head';\nimport { camAggregatorService } from '@services/cam-aggregator.service';\nimport AggregatorFilter from '@components/cam-aggregator/aggregator-filter';\nimport AggregatorProfileGridCard from '@components/cam-aggregator/grid-card';\nimport Loader from '@components/common/base/loader';\nvar initQueryState = {\n  offset: 0,\n  limit: 60,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc',\n  q: ''\n};\n\nvar CamAggregator = /*#__PURE__*/function (_PureComponent) {\n  _inherits(CamAggregator, _PureComponent);\n\n  var _super = _createSuper(CamAggregator);\n\n  function CamAggregator(props) {\n    var _this;\n\n    _classCallCheck(this, CamAggregator);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"search\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n        var query, resp, err;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _this.state.query;\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.setState({\n                  loading: true\n                });\n\n              case 4:\n                _context.next = 6;\n                return camAggregatorService.online(_objectSpread(_objectSpread({}, query), params || {}));\n\n              case 6:\n                resp = _context.sent;\n\n                _this.setState({\n                  performers: resp.data.data,\n                  total: resp.data.count\n                });\n\n                _context.next = 16;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                _context.next = 14;\n                return Promise.resolve(_context.t0);\n\n              case 14:\n                err = _context.sent;\n                message.error(getResponseError(err));\n\n              case 16:\n                _context.prev = 16;\n\n                _this.setState({\n                  loading: false\n                });\n\n                return _context.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10, 16, 19]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _this.state = {\n      query: initQueryState,\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(CamAggregator, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _router$query, _router$query2;\n\n        var router;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                router = this.props.router;\n                this.search({\n                  tag: ((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.tag) || '',\n                  q: ((_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.q) || ''\n                });\n                this.getCamAggregatorCategories();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevStates) {\n      var router = this.props.router;\n      var query = this.state.query;\n\n      if (router.query.q !== prevProps.router.query.q || query !== prevStates.query) {\n        var _router$query3, _router$query4;\n\n        var q = {\n          tag: ((_router$query3 = router.query) === null || _router$query3 === void 0 ? void 0 : _router$query3.tag) || '',\n          q: ((_router$query4 = router.query) === null || _router$query4 === void 0 ? void 0 : _router$query4.q) || ''\n        };\n        if (router.query.q !== prevProps.router.query.q) q.offset = 0;\n        this.search(q);\n      }\n\n      if (router.query.category !== prevProps.router.query.category) {\n        this.setQuery('category', router.query.category || '');\n      }\n    }\n  }, {\n    key: \"onLike\",\n    value: function () {\n      var _onLike = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(performer) {\n        var dispatchUpdatePerformerFavorite, _id, isFavorite, e;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatchUpdatePerformerFavorite = this.props.updatePerformerFavourite;\n                _id = performer._id, isFavorite = performer.isFavorite;\n                _context3.prev = 2;\n                _context3.next = 5;\n                return favouriteService.favorite(_id, isFavorite);\n\n              case 5:\n                dispatchUpdatePerformerFavorite(_id);\n                _context3.next = 14;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](2);\n                _context3.next = 12;\n                return Promise.resolve(_context3.t0);\n\n              case 12:\n                e = _context3.sent;\n                message.error(getResponseError(e));\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 8]]);\n      }));\n\n      function onLike(_x2) {\n        return _onLike.apply(this, arguments);\n      }\n\n      return onLike;\n    }()\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(name, value) {\n      var query = this.state.query;\n\n      if (name === 'category' && value !== query.category) {\n        Router.push({\n          pathname: '/cams',\n          query: {\n            category: value\n          }\n        }, \"/cams?category=\".concat(value));\n        return;\n      }\n\n      this.setState({\n        query: _objectSpread(_objectSpread({}, query), {}, _defineProperty({}, name, value))\n      });\n    }\n  }, {\n    key: \"setQuery\",\n    value: function setQuery(name, value) {\n      var query = this.state.query;\n      this.setState({\n        query: _objectSpread(_objectSpread({}, query), {}, _defineProperty({}, name, value))\n      });\n    }\n  }, {\n    key: \"getCamAggregatorCategories\",\n    value: function () {\n      var _getCamAggregatorCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var resp;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return camAggregatorService.categories({});\n\n              case 2:\n                resp = _context4.sent;\n                _context4.next = 5;\n                return this.setState({\n                  categories: resp.data\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getCamAggregatorCategories() {\n        return _getCamAggregatorCategories.apply(this, arguments);\n      }\n\n      return getCamAggregatorCategories;\n    }()\n  }, {\n    key: \"clearFilter\",\n    value: function clearFilter() {\n      this.setState({\n        query: initQueryState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          ui = _this$props.ui,\n          countries = _this$props.countries;\n      var _this$state = this.state,\n          query = _this$state.query,\n          _this$state$performer = _this$state.performers,\n          performers = _this$state$performer === void 0 ? [] : _this$state$performer,\n          categories = _this$state.categories,\n          total = _this$state.total,\n          loading = _this$state.loading;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, ui === null || ui === void 0 ? void 0 : ui.siteName, ' ', \"| Cams\")), __jsx(\"div\", {\n        className: \"homepage\"\n      }, __jsx(AggregatorFilter, _extends({\n        categories: categories,\n        countries: countries,\n        setFilter: this.setFilter.bind(this),\n        clearFilter: this.clearFilter.bind(this)\n      }, query)), __jsx(Loader, {\n        spinning: loading,\n        fullScreen: true\n      }), __jsx(PerformerGrid, _extends({}, this.props, {\n        data: performers,\n        total: total,\n        success: true,\n        onLike: this.onLike.bind(this),\n        title: \"Live cams\",\n        isPage: true,\n        setFilter: this.setFilter.bind(this),\n        gridCard: AggregatorProfileGridCard\n      }, query))));\n    }\n  }]);\n\n  return CamAggregator;\n}(PureComponent);\n\n_defineProperty(CamAggregator, \"layout\", 'public');\n\n_defineProperty(CamAggregator, \"authenticate\", false);\n\nvar bannerSelecter = function bannerSelecter(state) {\n  return state.banner.listBanners.data;\n};\n\nvar filterBanner = createSelector(bannerSelecter, function (banners) {\n  if (!banners.length) return {};\n  return {\n    topBanners: banners.filter(function (b) {\n      return b.position === 'top';\n    }),\n    rightBanners: banners.filter(function (b) {\n      return b.position === 'right';\n    }),\n    bottomBanners: banners.filter(function (b) {\n      return b.position === 'bottom';\n    })\n  };\n});\nCamAggregator.contextType = SocketContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread(_objectSpread({\n    ui: _objectSpread({}, state.ui)\n  }, state.performer.performers), {}, {\n    banners: filterBanner(state),\n    countries: state.settings.countries,\n    loggedIn: state.auth.loggedIn // categories: state.performer.categories.data\n\n  });\n};\n\nvar mapDispatch = {\n  getBanners: getBanners,\n  updateCurrentUser: updateCurrentUser,\n  updateCurrentStudio: updateCurrentStudio,\n  loginSuccess: loginSuccess\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(CamAggregator));","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/pages/cams/index.tsx"],"names":["React","PureComponent","PerformerGrid","connect","loginSuccess","updateCurrentUser","updateCurrentStudio","favouriteService","message","getResponseError","Router","withRouter","getBanners","createSelector","SocketContext","Head","camAggregatorService","AggregatorFilter","AggregatorProfileGridCard","Loader","initQueryState","offset","limit","gender","category","country","sortBy","sort","q","CamAggregator","props","params","query","state","setState","loading","online","resp","performers","data","total","count","Promise","resolve","err","error","router","search","tag","getCamAggregatorCategories","prevProps","prevStates","setQuery","performer","dispatchUpdatePerformerFavorite","updatePerformerFavourite","_id","isFavorite","favorite","e","name","value","push","pathname","categories","ui","countries","siteName","setFilter","bind","clearFilter","onLike","bannerSelecter","banner","listBanners","filterBanner","banners","length","topBanners","filter","b","position","rightBanners","bottomBanners","contextType","mapStateToProps","settings","loggedIn","auth","mapDispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  IPerformer,\n  ICountries,\n  IPerformSearch,\n  IUIConfig\n} from 'src/interfaces';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { connect } from 'react-redux';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateCurrentStudio } from '@redux/studio/actions';\nimport { favouriteService } from 'src/services';\nimport { message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport Router, { withRouter, NextRouter } from 'next/router';\nimport { getBanners } from '@redux/banner/actions';\nimport { createSelector } from 'reselect';\nimport { SocketContext } from 'src/socket';\nimport Head from 'next/head';\nimport { camAggregatorService } from '@services/cam-aggregator.service';\nimport { IAggregatorCategogiesModel } from 'src/interfaces/aggregator-categories';\nimport AggregatorFilter from '@components/cam-aggregator/aggregator-filter';\nimport AggregatorProfileGridCard from '@components/cam-aggregator/grid-card';\nimport Loader from '@components/common/base/loader';\n\ninterface IProps {\n  router: NextRouter;\n  ui: IUIConfig;\n  data: IPerformer[];\n  searchPerformer?: Function;\n  total?: number;\n  success?: boolean;\n  error?: any;\n  searching?: boolean;\n  loggedIn?: boolean;\n  query?: {\n    q: string;\n  };\n  // categories?: IPerformerCategogies[];\n  countries?: ICountries[];\n  updatePerformerFavourite: Function;\n  getBanners: Function;\n  banners: any;\n  updateCurrentUser: Function;\n  updateCurrentPerformer: Function;\n  updateCurrentStudio: Function;\n  loginSuccess: Function;\n}\n\ninterface IStates {\n  query: IPerformSearch;\n  loading?: boolean;\n  sort?: {\n    name: string;\n    sortBy?: string;\n  };\n  performers?: any[];\n  categories?: IAggregatorCategogiesModel[];\n  total?: number;\n}\n\nconst initQueryState: IPerformSearch = {\n  offset: 0,\n  limit: 60,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc',\n  q: ''\n};\n\nclass CamAggregator extends PureComponent<IProps, IStates> {\n  static layout = 'public';\n\n  static authenticate = false;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      query: initQueryState,\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const { router } = this.props;\n    this.search({\n      tag: router.query?.tag || '',\n      q: router.query?.q || ''\n    });\n    this.getCamAggregatorCategories();\n  }\n\n  componentDidUpdate(prevProps: IProps, prevStates: IStates) {\n    const { router } = this.props;\n    const { query } = this.state;\n    if (\n      router.query.q !== prevProps.router.query.q\n      || query !== prevStates.query\n    ) {\n      const q = {\n        tag: router.query?.tag || '',\n        q: router.query?.q || ''\n      } as any;\n      if (router.query.q !== prevProps.router.query.q) q.offset = 0;\n      this.search(q);\n    }\n\n    if (router.query.category !== prevProps.router.query.category) {\n      this.setQuery('category', router.query.category || '');\n    }\n  }\n\n  async onLike(performer: IPerformer) {\n    const {\n      updatePerformerFavourite: dispatchUpdatePerformerFavorite\n    } = this.props;\n    const { _id, isFavorite } = performer;\n    try {\n      await favouriteService.favorite(_id, isFavorite);\n      dispatchUpdatePerformerFavorite(_id);\n    } catch (error) {\n      const e = await Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  setFilter(name: string, value: any) {\n    const { query } = this.state;\n    if (name === 'category' && value !== query.category) {\n      Router.push({ pathname: '/cams', query: { category: value } }, `/cams?category=${value}`);\n      return;\n    }\n\n    this.setState({\n      query: {\n        ...query,\n        [name]: value\n      }\n    });\n  }\n\n  setQuery(name: string, value: any) {\n    const { query } = this.state;\n    this.setState({\n      query: {\n        ...query,\n        [name]: value\n      }\n    });\n  }\n\n  async getCamAggregatorCategories() {\n    const resp = await camAggregatorService.categories({});\n    await this.setState({ categories: resp.data });\n  }\n\n  search = async (params?) => {\n    const { query } = this.state;\n    try {\n      await this.setState({ loading: true });\n      const resp = await camAggregatorService.online({\n        ...query,\n        ...(params || {})\n      });\n      this.setState({\n        performers: resp.data.data,\n        total: resp.data.count\n      });\n    } catch (error) {\n      const err = await Promise.resolve(error);\n      message.error(getResponseError(err));\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  clearFilter() {\n    this.setState({\n      query: initQueryState\n    });\n  }\n\n  render() {\n    const { ui, countries } = this.props;\n    const {\n      query, performers = [], categories, total, loading\n    } = this.state;\n    return (\n      <>\n        <Head>\n          <title>\n            {ui?.siteName}\n            {' '}\n            | Cams\n          </title>\n        </Head>\n        <div className=\"homepage\">\n          <AggregatorFilter\n            categories={categories}\n            countries={countries}\n            setFilter={this.setFilter.bind(this)}\n            clearFilter={this.clearFilter.bind(this)}\n            {...query}\n          />\n          <Loader spinning={loading} fullScreen />\n          <PerformerGrid\n            {...this.props}\n            data={performers}\n            total={total}\n            success\n            onLike={this.onLike.bind(this)}\n            title=\"Live cams\"\n            isPage\n            setFilter={this.setFilter.bind(this)}\n            gridCard={AggregatorProfileGridCard}\n            {...query}\n          />\n\n        </div>\n      </>\n    );\n  }\n}\n\nconst bannerSelecter = (state) => state.banner.listBanners.data;\nconst filterBanner = createSelector(bannerSelecter, (banners) => {\n  if (!banners.length) return {};\n\n  return {\n    topBanners: banners.filter((b) => b.position === 'top'),\n    rightBanners: banners.filter((b) => b.position === 'right'),\n    bottomBanners: banners.filter((b) => b.position === 'bottom')\n  };\n});\n\nCamAggregator.contextType = SocketContext;\n\nconst mapStateToProps = (state) => ({\n  ui: { ...state.ui },\n  ...state.performer.performers,\n  banners: filterBanner(state),\n  countries: state.settings.countries,\n  loggedIn: state.auth.loggedIn\n  // categories: state.performer.categories.data\n});\nconst mapDispatch = {\n  getBanners,\n  updateCurrentUser,\n  updateCurrentStudio,\n  loginSuccess\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(CamAggregator));\n"]},"metadata":{},"sourceType":"module"}