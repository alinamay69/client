{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport { Row, Col, message, Pagination } from 'antd';\nimport Head from 'next/head';\nimport React, { PureComponent, createRef } from 'react';\nimport PurchasedVideoCard from 'src/components/videos/purchased-video-card';\nimport { videoService } from 'src/services';\nimport PopupVideoDetail from 'src/components/videos/popup-video';\nimport { getResponseError } from 'src/lib';\nimport PageHeader from '@components/common/layout/page-header';\nimport Loader from '@components/common/base/loader';\n\nclass PurchasedVideoPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"popupRef\", /*#__PURE__*/createRef());\n\n    this.state = {\n      limit: 12,\n      offset: 0,\n      videos: [],\n      loading: false,\n      success: false,\n      total: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  async loadData() {\n    const {\n      limit,\n      offset\n    } = this.state;\n\n    try {\n      await this.setState({\n        loading: true\n      });\n      const resp = await videoService.purchased({\n        limit,\n        offset\n      });\n      await this.setState({\n        videos: resp.data.data,\n        success: true,\n        total: resp.data.total\n      });\n    } catch (error) {\n      this.showError(error);\n    } finally {\n      await this.setState({\n        loading: false\n      });\n    }\n  }\n\n  async pageChange(page) {\n    const {\n      limit\n    } = this.state;\n    await this.setState({\n      offset: (page - 1) * limit\n    });\n    this.loadData();\n  }\n\n  async showError(e) {\n    const err = await Promise.resolve(e);\n    message.error(getResponseError(err));\n  }\n\n  render() {\n    const {\n      videos,\n      success,\n      total,\n      limit,\n      loading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"My Purchased Videos\")), __jsx(\"div\", {\n      className: \"main-profile-background\"\n    }, __jsx(PageHeader, {\n      title: \"Purchased Videos\"\n    }), __jsx(\"div\", {\n      className: \"purchased-videos-page pad40\"\n    }, loading && __jsx(Loader, {\n      spinning: true,\n      fullScreen: true\n    }), success && videos && videos.length > 0 ? __jsx(React.Fragment, null, __jsx(Row, null, videos.map(video => __jsx(Col, {\n      lg: 6,\n      md: 8,\n      sm: 12,\n      xs: 24,\n      key: video._id,\n      style: {\n        padding: '0 10px'\n      }\n    }, __jsx(PurchasedVideoCard, {\n      video: video,\n      playVideo: ({\n        _id\n      }) => {\n        this.popupRef.showModalBuyAssets(video.video.url || '');\n        videoService.increaseView(_id);\n      }\n    }))), total > limit && __jsx(Col, {\n      sm: 24,\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(Pagination, {\n      onChange: this.pageChange.bind(this),\n      defaultCurrent: 1,\n      pageSize: limit,\n      total: total\n    })))) : __jsx(\"div\", {\n      className: \"pad20\"\n    }, \"You have not purchased any videos yet.\"))), __jsx(\"div\", {\n      className: \"popup-video\"\n    }, __jsx(PopupVideoDetail, {\n      ref: ref => this.popupRef = ref\n    })));\n  }\n\n}\n\n_defineProperty(PurchasedVideoPage, \"authenticate\", true);\n\n_defineProperty(PurchasedVideoPage, \"layout\", 'primary');\n\nexport default PurchasedVideoPage;","map":null,"metadata":{},"sourceType":"module"}