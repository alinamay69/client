{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable dot-notation */\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { Button, message } from 'antd';\nimport Router from 'next/router';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport { SocketContext } from 'src/socket';\nimport { streamService } from 'src/services';\nimport videojs from 'video.js';\nimport './private-streaming-container.less';\nvar STREAM_JOINED = 'private-stream/streamJoined';\nvar STREAM_LEAVED = 'private-stream/streamLeaved';\nvar JOINED_THE_ROOM = 'JOINED_THE_ROOM';\n\nvar PrivateStreamingContainer = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PrivateStreamingContainer, _PureComponent);\n\n  var _super = _createSuper(PrivateStreamingContainer);\n\n  function PrivateStreamingContainer(props) {\n    var _this;\n\n    _classCallCheck(this, PrivateStreamingContainer);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"activeStreams\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"socket\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"getLiveStreamOrVodURLInterval\", void 0);\n\n    _this.state = {\n      sessionId: '',\n      // roomName\n      streamId: '',\n      streamList: [],\n      conversationId: '',\n      loading: false,\n      newAvailableStreams: []\n    };\n    return _this;\n  }\n\n  _createClass(PrivateStreamingContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.socket = this.context;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevStates) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          processing = _this$props.processing,\n          initialized = _this$props.initialized;\n      var _this$state = this.state,\n          conversationId = _this$state.conversationId,\n          newAvailableStreams = _this$state.newAvailableStreams;\n\n      if (prevProps.processing !== processing) {\n        this.handleLoading(processing);\n      }\n\n      if (conversationId && conversationId !== prevStates.conversationId) {\n        this.initSocketEvent();\n      }\n\n      if (initialized && newAvailableStreams.length) {\n        newAvailableStreams.forEach(function (streamId) {\n          _this2.play(streamId);\n        }); // eslint-disable-next-line react/no-did-update-set-state\n\n        this.setState({\n          newAvailableStreams: []\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload.bind(this));\n      Router.events.off('routeChangeStart', this.onbeforeunload.bind(this));\n    }\n  }, {\n    key: \"handleLoading\",\n    value: function handleLoading(v) {\n      this.setState({\n        loading: v\n      });\n    }\n  }, {\n    key: \"onHandlePrivateStream\",\n    value: function () {\n      var _onHandlePrivateStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(info, obj) {\n        var _this$state2, sessionId, conversationId, streamId, _this$props2, settings, webRTCAdaptor, token, activeStream, _token;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$state2 = this.state, sessionId = _this$state2.sessionId, conversationId = _this$state2.conversationId, streamId = _this$state2.streamId;\n                _this$props2 = this.props, settings = _this$props2.settings, webRTCAdaptor = _this$props2.webRTCAdaptor;\n                this.socket = this.context;\n\n                if (!(info === 'initialized')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                if (!(settings.optionForPrivate === 'hls')) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return streamService.getPublishToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 7:\n                token = _context.sent;\n                webRTCAdaptor.publish(streamId, token);\n\n              case 9:\n                webRTCAdaptor.joinRoom(conversationId, streamId);\n                _context.next = 26;\n                break;\n\n              case 12:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.NEW_STREAM_AVAILABLE)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                activeStream = this.activeStreams.find(function (id) {\n                  return id === obj.streamId;\n                });\n\n                if (!activeStream) {\n                  this.activeStreams.push(obj.streamId);\n                  this.createRemoteVideo(obj.stream);\n                }\n\n                _context.next = 26;\n                break;\n\n              case 17:\n                if (!(info === WEBRTC_ADAPTOR_INFORMATIONS.JOINED_THE_ROOM)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                if (!(settings.optionForPrivate === 'webrtc')) {\n                  _context.next = 23;\n                  break;\n                }\n\n                _context.next = 21;\n                return streamService.getPublishToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 21:\n                _token = _context.sent;\n                webRTCAdaptor.publish(streamId, _token);\n\n              case 23:\n                _context.next = 26;\n                break;\n\n              case 25:\n                if (info === 'publish_started') {\n                  this.socket.emit('private-stream/join', {\n                    conversationId: conversationId,\n                    streamId: streamId,\n                    sessionId: sessionId\n                  });\n                  this.setState({\n                    loading: false\n                  });\n                } else if (info === 'publish_finished') {\n                  this.socket.emit('private-stream/leave', {\n                    conversationId: conversationId,\n                    streamId: streamId,\n                    sessionId: sessionId\n                  });\n                  this.setState({\n                    loading: false\n                  });\n                }\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function onHandlePrivateStream(_x, _x2) {\n        return _onHandlePrivateStream.apply(this, arguments);\n      }\n\n      return onHandlePrivateStream;\n    }()\n  }, {\n    key: \"onbeforeunload\",\n    value: function onbeforeunload() {\n      this.leaveStream();\n    }\n  }, {\n    key: \"initSocketEvent\",\n    value: function initSocketEvent() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          initWebRTCAdaptor = _this$props3.initWebRTCAdaptor,\n          settings = _this$props3.settings,\n          role_data = _this$props3.role_data,\n          performer = _this$props3.performer;\n      this.socket = this.context;\n      this.socket.on(JOINED_THE_ROOM, function (_ref) {\n        var streamId = _ref.streamId,\n            streamList = _ref.streamList,\n            _id = _ref.conversationId;\n        var _this3$state = _this3.state,\n            conversationId = _this3$state.conversationId,\n            newAvailableStreams = _this3$state.newAvailableStreams;\n        if (_id !== conversationId) return;\n\n        _this3.setState({\n          streamId: streamId,\n          streamList: streamList\n        });\n\n        initWebRTCAdaptor(_this3.onHandlePrivateStream.bind(_this3));\n\n        if (window['videojs'] && streamList.length) {\n          settings.optionForPrivate === 'webrtc' ? _this3.setState({\n            newAvailableStreams: [].concat(_toConsumableArray(newAvailableStreams), [streamList[0]])\n          }) : _this3.subscribeHLS(streamList[0]);\n        }\n      });\n      this.socket.on(STREAM_JOINED, function (data) {\n        var _this3$state2 = _this3.state,\n            streamId = _this3$state2.streamId,\n            newAvailableStreams = _this3$state2.newAvailableStreams;\n\n        if (window['videojs'] && streamId !== data.streamId) {\n          settings.optionForPrivate === 'webrtc' ? _this3.setState({\n            newAvailableStreams: [].concat(_toConsumableArray(newAvailableStreams), [data.streamId])\n          }) : _this3.subscribeHLS(data.streamId);\n        }\n      });\n      this.socket.on(STREAM_LEAVED, function (data) {\n        var streamList = _this3.state.streamList;\n\n        _this3.setState({\n          streamList: streamList.filter(function (id) {\n            return id !== data.streamId;\n          })\n        });\n\n        window['mainPlayer'] && window['mainPlayer'].dispose();\n        _this3.activeStreams = _this3.activeStreams.filter(function (id) {\n          return id !== data.streamId;\n        });\n\n        _this3.removeRemoteVideo();\n\n        message.error('Private call has ended.');\n        window.setTimeout(function () {\n          if (role_data === 'performer') {\n            Router.push('/live');\n          } else if (role_data === 'user') {\n            Router.push({\n              pathname: '/stream',\n              query: {\n                performer: JSON.stringify(performer)\n              }\n            }, \"/profile/\".concat(performer.username));\n          } else {\n            Router.push('/');\n          }\n        }, 1000);\n      });\n      Router.events.on('routeChangeStart', this.onbeforeunload.bind(this));\n      window.addEventListener('beforeunload', this.onbeforeunload.bind(this));\n    }\n  }, {\n    key: \"start\",\n    value: function start(sessionId, conversationId) {\n      this.setState({\n        sessionId: sessionId,\n        conversationId: conversationId\n      });\n    }\n  }, {\n    key: \"leaveStream\",\n    value: function leaveStream() {\n      var _this$props4 = this.props,\n          publish_started = _this$props4.publish_started,\n          webRTCAdaptor = _this$props4.webRTCAdaptor;\n      var _this$state3 = this.state,\n          sessionId = _this$state3.sessionId,\n          conversationId = _this$state3.conversationId,\n          streamId = _this$state3.streamId;\n      this.getLiveStreamOrVodURLInterval && clearInterval(this.getLiveStreamOrVodURLInterval);\n      this.socket.off(JOINED_THE_ROOM);\n      this.socket.off(STREAM_JOINED);\n      this.socket.off(STREAM_LEAVED);\n\n      if (publish_started) {\n        webRTCAdaptor && webRTCAdaptor.leaveFromRoom(conversationId);\n        this.socket.emit('private-stream/leave', {\n          conversationId: conversationId,\n          streamId: streamId,\n          sessionId: sessionId\n        });\n      }\n    }\n  }, {\n    key: \"ended\",\n    value: function () {\n      var _ended = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(streamId) {\n        var _this4 = this;\n\n        var settings, src;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                settings = this.props.settings;\n                _context2.next = 3;\n                return streamService.getLiveStreamOrVodURL({\n                  streamId: streamId,\n                  settings: settings,\n                  appName: settings.AntMediaAppname\n                });\n\n              case 3:\n                src = _context2.sent;\n\n                if (src) {\n                  this.getLiveStreamOrVodURLInterval = setInterval(function () {\n                    fetch(src, {\n                      method: 'GET'\n                    }).then(function () {\n                      _this4.subscribeHLS(streamId);\n\n                      _this4.getLiveStreamOrVodURLInterval && clearInterval(_this4.getLiveStreamOrVodURLInterval);\n                    });\n                  }, 5000);\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function ended(_x3) {\n        return _ended.apply(this, arguments);\n      }\n\n      return ended;\n    }()\n  }, {\n    key: \"subscribeHLS\",\n    value: function () {\n      var _subscribeHLS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(streamId) {\n        var _this5 = this;\n\n        var _this$props5, settings, configs, appName, src, video;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props5 = this.props, settings = _this$props5.settings, configs = _this$props5.configs;\n                appName = configs.appName || settings.AntMediaAppname;\n                this.getLiveStreamOrVodURLInterval && clearInterval(this.getLiveStreamOrVodURLInterval);\n                _context3.next = 5;\n                return streamService.getLiveStreamOrVodURL({\n                  appName: appName,\n                  settings: settings,\n                  streamId: streamId\n                });\n\n              case 5:\n                src = _context3.sent;\n\n                if (src) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 8:\n                video = document.querySelector('#private-subscriber');\n\n                if (!video) {\n                  video = document.createElement('video');\n                  video.setAttribute('id', 'private-subscriber');\n                  video.setAttribute('class', 'video-js vjs-waiting');\n                  video.setAttribute('autoplay', 'autoplay');\n                  video.setAttribute('data-setup', '{\"fluid\": true}');\n                  document.querySelector('.private-streaming-container').append(video);\n                }\n\n                if (!window['mainPlayer']) {\n                  window['mainPlayer'] = videojs('private-subscriber', {\n                    liveui: true,\n                    controls: true\n                  });\n                  window['mainPlayer'].on('ended', function () {\n                    return _this5.ended(streamId);\n                  });\n                  window['mainPlayer'].on('error', function () {\n                    return _this5.ended(streamId);\n                  });\n                }\n\n                setTimeout(function () {\n                  if (!window['mainPlayer']) return;\n                  window['mainPlayer'].src({\n                    type: 'application/x-mpegURL',\n                    src: src\n                  });\n                  window['mainPlayer'].play();\n                }, 10 * 1000);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribeHLS(_x4) {\n        return _subscribeHLS.apply(this, arguments);\n      }\n\n      return subscribeHLS;\n    }()\n  }, {\n    key: \"createRemoteVideo\",\n    value: function createRemoteVideo(stream) {\n      var video = document.createElement('video');\n      video.setAttribute('id', 'private-subscriber');\n      video.setAttribute('class', 'video-js');\n      video.setAttribute('autoplay', 'autoplay');\n      video.setAttribute('controls', 'controls');\n      video.srcObject = stream;\n      document.querySelector('.private-streaming-container').append(video); // video.oncanplay = (() => {\n      //   window['player'] = videojs('private-subscriber', {\n      //     liveui: true,\n      //     controls: true\n      //   });\n      // });\n    }\n  }, {\n    key: \"removeRemoteVideo\",\n    value: function removeRemoteVideo() {\n      var video = document.getElementById('private-subscriber');\n\n      if (video) {\n        video.srcObject = null; // window['player'] && window['player'].dispose();\n\n        document.querySelector('.private-streaming-container').removeChild(video);\n      }\n    }\n  }, {\n    key: \"leave\",\n    value: function leave() {\n      if (true) {\n        window.location.reload();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var leaveSession = this.props.leaveSession;\n      leaveSession();\n    }\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(streamId) {\n        var _this$props6, settings, webRTCAdaptor, token;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props6 = this.props, settings = _this$props6.settings, webRTCAdaptor = _this$props6.webRTCAdaptor;\n                _context4.next = 3;\n                return streamService.getSubscriberToken({\n                  streamId: streamId,\n                  settings: settings\n                });\n\n              case 3:\n                token = _context4.sent;\n                webRTCAdaptor.play(streamId, token);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function play(_x5) {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props7 = this.props,\n          _onClick = _this$props7.onClick,\n          btnText = _this$props7.btnText,\n          initialized = _this$props7.initialized;\n      var loading = this.state.loading;\n      return __jsx(\"div\", {\n        className: \"private-streaming-container\"\n      }, __jsx(\"video\", {\n        id: \"private-publisher\",\n        autoPlay: true,\n        muted: true,\n        playsInline: true\n      }), !initialized ? __jsx(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return _onClick();\n        },\n        loading: loading,\n        block: true\n      }, btnText || 'Start Streaming') : __jsx(Button, {\n        type: \"primary\",\n        onClick: this.leave.bind(this),\n        block: true,\n        disabled: loading\n      }, \"Stop Streaming\"));\n    }\n  }]);\n\n  return PrivateStreamingContainer;\n}(PureComponent);\n\nPrivateStreamingContainer.contextType = SocketContext;\nexport default withAntmedia(PrivateStreamingContainer);","map":null,"metadata":{},"sourceType":"module"}