{"ast":null,"code":"var __jsx = React.createElement;\nimport { Table, Tag } from 'antd';\nimport React from 'react';\nimport { formatDate } from 'src/lib';\n// const handleReset = (clearFilters) => {\n//   clearFilters();\n//   this.setState({ searchText: '' });\n// };\n// const handleSearch = (selectedKeys, confirm, dataIndex) => {\n//   confirm();\n//   this.setState({\n//     searchText: selectedKeys[0],\n//     searchedColumn: dataIndex\n//   });\n// };\nexport const TransactionHistoryTable = ({\n  transactions,\n  rowKey,\n  pageSize,\n  total,\n  onChange\n}) => {\n  // const getColumnSearchProps = (dataIndex) => ({\n  //   filterDropdown: ({\n  //     setSelectedKeys,\n  //     selectedKeys,\n  //     confirm,\n  //     clearFilters\n  //   }) => {\n  //     <div style={{ padding: 8 }}>\n  //       <Input\n  //         placeholder={`Search ${dataIndex}`}\n  //         value={selectedKeys[0]}\n  //         onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n  //         onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\n  //         style={{ width: 188, marginBottom: 8, display: 'block' }}\n  //       />\n  //       <Space>\n  //         <Button\n  //           type=\"primary\"\n  //           onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n  //           icon={<SearchOutlined />}\n  //           size=\"small\"\n  //           style={{ width: 90 }}\n  //         >\n  //           Search\n  //         </Button>\n  //         <Button\n  //           onClick={() => handleReset(clearFilters)}\n  //           size=\"small\"\n  //           style={{ width: 90 }}\n  //         >\n  //           Reset\n  //         </Button>\n  //       </Space>\n  //     </div>;\n  //   },\n  //   filterIcon: (filtered) => (\n  //     <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n  //   ),\n  //   onFilter: (value, record) => (record[dataIndex]\n  //     ? record[dataIndex]\n  //       .toString()\n  //       .toLowerCase()\n  //       .includes(value.toLowerCase())\n  //     : ''),\n  //   onFilterDropdownVisibleChange: () => {},\n  //   render: (text) => (this.state.searchedColumn === dataIndex ? (\n  //     <span>{this.state.searchText}</span>\n  //   ) : (\n  //     text\n  //   ))\n  // });\n  const columns = [{\n    title: 'Transaction ID',\n    dataIndex: '_id',\n    key: '_id',\n\n    render(_id) {\n      return __jsx(\"span\", null, _id.slice(16, 24).toUpperCase());\n    }\n\n  }, {\n    title: 'Price',\n    dataIndex: 'totalPrice',\n    key: 'totalPrice',\n    align: 'center',\n    sorter: true\n  }, {\n    title: 'Tokens',\n    align: 'center',\n\n    render(data, record) {\n      var _record$products$, _record$products$$tok;\n\n      return __jsx(\"span\", null, record === null || record === void 0 ? void 0 : (_record$products$ = record.products[0]) === null || _record$products$ === void 0 ? void 0 : (_record$products$$tok = _record$products$.tokens) === null || _record$products$$tok === void 0 ? void 0 : _record$products$$tok.toFixed(2));\n    }\n\n  }, {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n    filters: [{\n      text: 'Success',\n      value: 'success'\n    }, {\n      text: 'Pending',\n      value: 'pending'\n    }, {\n      text: 'Canceled',\n      value: 'canceled'\n    }],\n    onFilter: (value, record) => record.status.includes(value),\n\n    render(status) {\n      switch (status) {\n        case 'success':\n          return __jsx(Tag, {\n            color: \"green\"\n          }, \"Success\");\n\n        case 'pending':\n          return __jsx(Tag, {\n            color: \"warning\"\n          }, \"Pending\");\n\n        case 'canceled':\n          return __jsx(Tag, {\n            color: \"default\"\n          }, \"Canceled\");\n\n        default:\n          return __jsx(Tag, {\n            color: \"default\"\n          }, \"Canceled\");\n      }\n    }\n\n  }, {\n    title: 'Date & Time',\n    dataIndex: 'createdAt',\n    sorter: true,\n    key: 'createdAt',\n\n    render(date) {\n      return __jsx(\"span\", null, formatDate(date));\n    }\n\n  }];\n  return __jsx(Table, {\n    columns: columns,\n    rowKey: rowKey,\n    dataSource: transactions,\n    pagination: {\n      total,\n      pageSize\n    },\n    onChange: onChange.bind(this)\n  });\n};","map":null,"metadata":{},"sourceType":"module"}