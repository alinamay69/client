{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable react/no-array-index-key */\n\n/* eslint-disable no-nested-ternary */\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Space, Row, Col, Pagination } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { defaultColor } from 'src/lib';\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\n\nconst renderTitle = (gender, name) => __jsx(\"div\", {\n  className: \"performer-title\"\n}, __jsx(\"span\", {\n  style: {\n    marginRight: 5\n  }\n}, name), gender === 'male' ? __jsx(MaleSignIcon, null) : gender === 'female' ? __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n  className: \"anticon\"\n}, __jsx(TransgenderIcon, null)));\n\nconst renderTags = tags => __jsx(Space, {\n  className: \"tags\"\n}, tags.map(tag => __jsx(Link, {\n  href: {\n    pathname: '/tag',\n    query: {\n      tags: tag\n    }\n  },\n  key: tag,\n  as: `/tag/${tag}`\n}, __jsx(\"a\", null, \"#\", tag))));\n\nconst GridCard = ({\n  performer,\n  loggedIn,\n  onLike,\n  className,\n  placeholderAvatarUrl\n}) => {\n  var _performer$stats;\n\n  const {\n    isOnline,\n    streamingStatus\n  } = performer;\n  const statusClassNames = ['p-status'];\n  let status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, performer.isBlocked && __jsx(\"div\", {\n    className: \"blocked-thumb\"\n  }, __jsx(LockOutlined, null)), __jsx(Link, {\n    href: {\n      pathname: '/stream',\n      query: {\n        performer: JSON.stringify(performer)\n      }\n    },\n    as: `/profile/${performer.username}`\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\",\n    style: {\n      backgroundImage: `url(${typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl})`\n    }\n  }, __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), __jsx(\"div\", {\n    className: \"p-gradient\"\n  }, renderTitle(performer.gender, performer.username), __jsx(\"div\", {\n    className: \"performer-view\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) || 0)))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    }\n  }, __jsx(\"div\", null, performer.tags && renderTags(performer.tags)), __jsx(\"div\", {\n    \"aria-hidden\": true,\n    hidden: !loggedIn,\n    style: {\n      cursor: 'pointer',\n      color: defaultColor.primaryColor\n    },\n    onClick: () => onLike(performer)\n  }, performer.isFavorite ? __jsx(HeartFilled, {\n    className: \"icon\"\n  }) : __jsx(HeartOutlined, {\n    className: \"icon\"\n  }))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\nconst RowGrid = ({\n  data,\n  loggedIn,\n  onLike,\n  placeholderAvatarUrl\n}) => __jsx(Row, null, data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n  placeholderAvatarUrl: placeholderAvatarUrl,\n  className: \"performer-box\",\n  key: performer._id,\n  performer: performer,\n  loggedIn: loggedIn,\n  onLike: () => onLike(performer)\n})));\n\nconst renderGrid = (data, loggedIn, onLike, rightBanners, bottomBanners, placeholderAvatarUrl) => {\n  const {\n    length\n  } = data;\n\n  if (length <= 12) {\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(Row, null, __jsx(Col, {\n      lg: 16,\n      md: 16,\n      xs: 24\n    }, data && data.length > 0 && data.map(performer => __jsx(GridCard, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      className: \"performer-box performer-box-4-item\",\n      key: performer._id,\n      performer: performer,\n      loggedIn: loggedIn,\n      onLike: () => onLike(performer)\n    }))), __jsx(Col, {\n      lg: 8,\n      md: 4,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))));\n  }\n\n  if (length > 12 && length <= 24) {\n    const dataChunk = chunk(data, 12);\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(Row, null, __jsx(Col, {\n      lg: 16,\n      md: 16,\n      xs: 24\n    }, dataChunk[0] && dataChunk[0].length > 0 && dataChunk[0].map(performer => __jsx(GridCard, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      className: \"performer-box performer-box-4-item\",\n      key: performer._id,\n      performer: performer,\n      loggedIn: loggedIn,\n      onLike: () => onLike(performer)\n    }))), __jsx(Col, {\n      lg: 8,\n      md: 8,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: dataChunk[1],\n      loggedIn: loggedIn,\n      onLike: performer => onLike(performer)\n    }), __jsx(Row, null, __jsx(Col, {\n      xs: 24\n    }, bottomBanners && bottomBanners.length > 0 ? __jsx(Banner, {\n      banners: bottomBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner-bottom.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))));\n  }\n\n  if (length > 24 && length <= 36) {\n    const dataChunk = chunk(data, 12);\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: dataChunk[0],\n      loggedIn: loggedIn,\n      onLike: performer => onLike(performer)\n    }), __jsx(Row, {\n      className: \"middle-performer-list\"\n    }, __jsx(Col, {\n      xl: 16,\n      lg: 18,\n      md: 18,\n      xs: 24\n    }, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      className: \"performer-box performer-box-4-item\",\n      key: performer._id,\n      performer: performer,\n      loggedIn: loggedIn,\n      onLike: () => onLike(performer)\n    }))), __jsx(Col, {\n      xl: 8,\n      lg: 6,\n      md: 6,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: dataChunk[2],\n      loggedIn: loggedIn,\n      onLike: performer => onLike(performer)\n    }), __jsx(Row, null, __jsx(Col, {\n      xs: 24\n    }, bottomBanners && bottomBanners.length > 0 ? __jsx(Banner, {\n      banners: bottomBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner-bottom.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))));\n  }\n\n  if (length > 36) {\n    const dataChunk = chunk(data, 12);\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: dataChunk[0],\n      loggedIn: loggedIn,\n      onLike: performer => onLike(performer)\n    }), __jsx(Row, null, __jsx(Col, {\n      lg: 16,\n      md: 16,\n      xs: 24\n    }, dataChunk[1] && dataChunk[1].length > 0 && dataChunk[1].map(performer => __jsx(GridCard, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      className: \"performer-box performer-box-4-item\",\n      key: performer._id,\n      performer: performer,\n      loggedIn: loggedIn,\n      onLike: () => onLike(performer)\n    }))), __jsx(Col, {\n      lg: 8,\n      md: 8,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: dataChunk[2],\n      loggedIn: loggedIn,\n      onLike: performer => onLike(performer)\n    }), __jsx(Row, null, __jsx(Col, {\n      xs: 24\n    }, bottomBanners && bottomBanners.length > 0 ? __jsx(Banner, {\n      banners: bottomBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner-bottom.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), dataChunk.splice(0, 3) && dataChunk.splice(0, 3).length > 0 && dataChunk.splice(0, 3).map((d, index) => __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      key: `row-grid${index}`,\n      data: d,\n      loggedIn: loggedIn,\n      onLike: performer => onLike(performer)\n    })));\n  }\n\n  return {};\n};\n\nconst PerformerGrid = ({\n  data,\n  searching,\n  success,\n  title,\n  onLike,\n  loggedIn,\n  isPage,\n  rightBanners,\n  bottomBanners,\n  offset,\n  limit,\n  total,\n  setFilter,\n  placeholderAvatarUrl\n}) => {\n  const actions = setFilter && total > 0 ? [total >= 60 && __jsx(Pagination, {\n    disabled: searching,\n    current: Math.round(offset / limit) + 1,\n    pageSize: limit,\n    total: total,\n    size: \"small\",\n    onChange: page => setFilter('offset', (page - 1) * limit)\n  })] : [];\n  return __jsx(Card, {\n    className: \"performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    bodyStyle: {\n      padding: '0'\n    },\n    actions: actions\n  }, __jsx(Loader, {\n    spinning: searching\n  }), success // eslint-disable-next-line no-nested-ternary\n  && (total > 0 ? isPage ? renderGrid(data, loggedIn, onLike, rightBanners, bottomBanners, placeholderAvatarUrl) : data.map(performer => __jsx(Col, {\n    xl: 6,\n    md: 8,\n    sm: 10,\n    xs: 16,\n    key: performer._id,\n    className: \"pad12-5\"\n  }, __jsx(GridCard, {\n    key: performer === null || performer === void 0 ? void 0 : performer._id,\n    placeholderAvatarUrl: placeholderAvatarUrl,\n    className: \"performer-box\",\n    performer: performer,\n    loggedIn: loggedIn,\n    onLike: p => onLike(p)\n  }))) : __jsx(\"div\", {\n    className: \"ant-card-head\"\n  }, \"No model found.\")));\n};\n\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  // error: null,\n  searching: false,\n  title: '',\n  onLike: null,\n  isPage: false,\n  rightBanners: [],\n  bottomBanners: [],\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nconst mapStates = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl\n});\n\nconst mapDispatch = {};\nexport default connect(mapStates, mapDispatch)(PerformerGrid);","map":null,"metadata":{},"sourceType":"module"}