{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Form, Input, Select, Button, Tag, Space } from 'antd';\nimport React, { PureComponent } from 'react';\nimport Page from '@components/common/layout/page';\nimport './detail.less';\nimport { OrderStatus } from 'src/components/order';\nimport { PerformerUsername } from '@components/performer';\nimport NumberFormat from '@components/common/layout/numberformat';\nimport Router from 'next/router';\nexport var FormOrder = /*#__PURE__*/function (_PureComponent) {\n  _inherits(FormOrder, _PureComponent);\n\n  var _super = _createSuper(FormOrder);\n\n  function FormOrder() {\n    _classCallCheck(this, FormOrder);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FormOrder, [{\n    key: \"render\",\n    value: function render() {\n      var _order$userInfo;\n\n      var _this$props = this.props,\n          order = _this$props.order,\n          loading = _this$props.loading,\n          isUpdating = _this$props.isUpdating,\n          disableUpdate = _this$props.disableUpdate,\n          onFinish = _this$props.onFinish,\n          isUser = _this$props.isUser;\n      return __jsx(Page, null, order && __jsx(\"div\", {\n        className: \"main-container\"\n      }, __jsx(Form, {\n        onFinish: onFinish,\n        wrapperCol: {\n          sm: {\n            span: 18\n          }\n        },\n        labelCol: {\n          sm: {\n            span: 6\n          }\n        },\n        initialValues: order,\n        id: \"form-update-order\"\n      }, __jsx(Form.Item, {\n        wrapperCol: {\n          sm: {\n            span: 12\n          }\n        }\n      }, __jsx(Tag, {\n        color: \"magenta\"\n      }, \"#\", order.orderNumber)), __jsx(Form.Item, {\n        label: \"User\"\n      }, (order === null || order === void 0 ? void 0 : (_order$userInfo = order.userInfo) === null || _order$userInfo === void 0 ? void 0 : _order$userInfo.username) || 'N/A'), __jsx(Form.Item, {\n        label: \"Performer\"\n      }, order !== null && order !== void 0 && order.performerInfo ? __jsx(PerformerUsername, {\n        performer: order.performerInfo\n      }) : 'N/A'), __jsx(Form.Item, {\n        label: \"Product\"\n      }, order.productsInfo && order.productsInfo.length && order.productsInfo[0].name), __jsx(Form.Item, {\n        label: \"Quantity\"\n      }, order.quantity), __jsx(Form.Item, {\n        label: \"Total Price\"\n      }, __jsx(NumberFormat, {\n        value: order.totalPrice,\n        suffix: \" tokens\"\n      })), __jsx(Form.Item, {\n        label: \"Delivery Address\"\n      }, order.deliveryAddress || 'N/A'), __jsx(Form.Item, {\n        label: \"Delivery Postal Code\"\n      }, order.postalCode || 'N/A'), __jsx(Form.Item, {\n        name: \"shippingCode\",\n        label: \"Shipping Code\"\n      }, !isUser ? __jsx(Input, {\n        placeholder: \"Enter shipping code here\"\n      }) : order.shippingCode), !disableUpdate ? __jsx(Form.Item, {\n        name: \"deliveryStatus\",\n        label: \"Delivery Status\"\n      }, __jsx(Select, null, __jsx(Select.Option, {\n        key: \"processing\",\n        value: \"processing\"\n      }, \"Processing\"), __jsx(Select.Option, {\n        key: \"shipping\",\n        value: \"shipping\"\n      }, \"Shipping\"), __jsx(Select.Option, {\n        key: \"delivered\",\n        value: \"delivered\"\n      }, \"Delivered\"), __jsx(Select.Option, {\n        key: \"refunded\",\n        value: \"refunded\"\n      }, \"Refunded\"))) : __jsx(Form.Item, {\n        name: \"deliveryStatus\",\n        label: \"Delivery Status\"\n      }, __jsx(OrderStatus, {\n        status: order.deliveryStatus\n      })), __jsx(Form.Item, null, __jsx(Space, null, __jsx(Button, {\n        type: \"primary\",\n        onClick: function onClick() {\n          return Router.back();\n        }\n      }, \"Back\"), __jsx(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: isUpdating,\n        disabled: loading,\n        hidden: disableUpdate\n      }, \"Update\"))))));\n    }\n  }]);\n\n  return FormOrder;\n}(PureComponent);","map":null,"metadata":{},"sourceType":"module"}