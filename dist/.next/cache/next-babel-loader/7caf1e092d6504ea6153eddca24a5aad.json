{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport './index.less';\nimport { PureComponent } from 'react';\nimport Header from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport GroupChatContainer from '@components/streaming/group-streaming-container';\nimport { streamService } from 'src/services';\nimport { connect } from 'react-redux';\nimport { resetStreamMessage, getStreamConversation } from '@redux/stream-chat/actions';\nimport { SocketContext, Event } from 'src/socket';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport Router from 'next/router';\nimport { Description } from '@components/streaming';\nimport { getResponseError } from '@lib/utils'; // eslint-disable-next-line no-shadow\n\nvar STREAM_EVENT;\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOINED_THE_ROOM\"] = \"JOINED_THE_ROOM\";\n  STREAM_EVENT[\"JOIN_ROOM\"] = \"JOIN_ROOM\";\n  STREAM_EVENT[\"LEAVE_ROOM\"] = \"LEAVE_ROOM\";\n  STREAM_EVENT[\"RECEIVED_PAID_TOKEN\"] = \"RECEIVED_PAID_TOKEN\";\n  STREAM_EVENT[\"STREAM_INFORMATION_CHANGED\"] = \"private-stream/streamInformationChanged\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nclass PerformerGroupChat extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"streamRef\", void 0);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leaveSession();\n    });\n\n    _defineProperty(this, \"receivedPaidTokenHandler\", ({\n      token,\n      conversationId\n    }) => {\n      var _activeConversation$d;\n\n      const {\n        activeConversation\n      } = this.props;\n      const {\n        receivedToken\n      } = this.state;\n\n      if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n        this.setState({\n          receivedToken: receivedToken + token\n        });\n      }\n    });\n\n    this.state = {\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    };\n  }\n\n  componentDidMount() {\n    this.socket = this.context;\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  handler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d2;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d2 = activeConversation.data) === null || _activeConversation$d2 === void 0 ? void 0 : _activeConversation$d2._id) === conversationId) {\n      this.setState({\n        total,\n        members\n      });\n    }\n  }\n\n  leaveSession() {\n    var _activeConversation$d3;\n\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n\n    if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d3 = activeConversation.data) !== null && _activeConversation$d3 !== void 0 && _activeConversation$d3._id) {\n      this.socket.emit(STREAM_EVENT.LEAVE_ROOM, {\n        conversationId: activeConversation.data._id\n      });\n      this.socket.off(STREAM_EVENT.RECEIVED_PAID_TOKEN);\n      dispatchResetStreamMessage();\n    }\n\n    this.setState({\n      processing: false,\n      roomJoined: false,\n      total: 0,\n      receivedToken: 0,\n      members: []\n    });\n  }\n\n  async startConversation() {\n    const {\n      getStreamConversation: dispatchGetStreamConversation\n    } = this.props;\n\n    try {\n      this.setState({\n        processing: true\n      });\n      const resp = await streamService.startGroupChat();\n\n      if (resp && resp.data) {\n        this.socket = this.context;\n        this.streamRef && this.streamRef.start(resp.data.sessionId, resp.data.conversation._id);\n        dispatchGetStreamConversation({\n          conversation: resp.data.conversation\n        });\n        this.socket && this.socket.emit(STREAM_EVENT.JOIN_ROOM, {\n          conversationId: resp.data.conversation._id\n        });\n      }\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n    } finally {\n      this.setState({\n        processing: false\n      });\n    }\n  }\n\n  roomJoinedHandler({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d4;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d4 = activeConversation.data) === null || _activeConversation$d4 === void 0 ? void 0 : _activeConversation$d4._id) === conversationId) {\n      this.setState({\n        total,\n        members,\n        roomJoined: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      user\n    } = this.props;\n    const {\n      processing,\n      total,\n      members,\n      roomJoined,\n      receivedToken\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Header, null, __jsx(\"title\", null, \"Group Chat\")), __jsx(Event, {\n      event: STREAM_EVENT.STREAM_INFORMATION_CHANGED,\n      handler: this.handler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.JOINED_THE_ROOM,\n      handler: this.roomJoinedHandler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.RECEIVED_PAID_TOKEN,\n      handler: this.receivedPaidTokenHandler.bind(this)\n    }), __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(Row, null, __jsx(Col, {\n      md: 12,\n      xs: 24\n    }, __jsx(GroupChatContainer, _extends({}, this.props, {\n      participantId: user._id // eslint-disable-next-line no-return-assign\n      ,\n      ref: ref => this.streamRef = ref,\n      processing: processing,\n      sessionId: \"\",\n      configs: {\n        localVideoId: 'localVideoId'\n      },\n      onClick: this.startConversation.bind(this),\n      btnText: \"Start Conversation\"\n    })), __jsx(Description, {\n      roomJoined: roomJoined,\n      receivedToken: receivedToken\n    })), __jsx(Col, {\n      md: 12,\n      xs: 24\n    }, __jsx(ChatBox, _extends({}, this.props, {\n      totalParticipant: total,\n      members: members\n    }))))));\n  }\n\n}\n\n_defineProperty(PerformerGroupChat, \"authenticate\", true);\n\n_defineProperty(PerformerGroupChat, \"onlyPerformer\", true);\n\nPerformerGroupChat.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({}, state.streaming), {}, {\n  user: state.user.current,\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n});\n\nconst mapDispatchs = {\n  getStreamConversation,\n  resetStreamMessage\n};\nexport default connect(mapStateToProps, mapDispatchs)(PerformerGroupChat);","map":null,"metadata":{},"sourceType":"module"}