{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Menu } from 'antd';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport './left-header-content.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport { useRouter } from 'next/router';\n\nconst LeftHeaderContent = ({\n  loggedIn,\n  current,\n  pluralTextModel,\n  performerCategories,\n  settings\n}) => {\n  const router = useRouter();\n  const path = settings[SETTING_KEYS.OPTION_FOR_GROUP] === 'webrtc' ? 'webrtc/' : '';\n  let MenuItem = [__jsx(Menu.Item, {\n    key: \"home\"\n  }, __jsx(Link, {\n    href: \"/cams\",\n    shallow: true,\n    as: \"/\"\n  }, __jsx(\"a\", null, \"Home\"))), __jsx(Menu.SubMenu, {\n    title: \"Categories\",\n    key: \"left-menu-performer-categories\",\n    popupClassName: \"menu-left-header-submenu-popup\"\n  }, performerCategories.data.length > 0 && performerCategories.data.map(category => __jsx(Menu.Item, {\n    key: `category-${category._id}`\n  }, __jsx(Link, {\n    href: {\n      pathname: '/performer-category',\n      query: {\n        slug: category.slug,\n        category: JSON.stringify(category)\n      }\n    },\n    as: `/performer-category/${category.slug}`\n  }, __jsx(\"a\", null, category.name))))), __jsx(Menu.Item, {\n    key: \"vip-model\"\n  }, __jsx(Link, {\n    href: \"/performer-category\",\n    as: \"/vip-models\"\n  }, __jsx(\"a\", null, \"Vip Models\"))), __jsx(Menu.Item, {\n    key: \"all-model\"\n  }, __jsx(Link, {\n    href: \"/performer-category\",\n    as: \"/all-models\"\n  }, __jsx(\"a\", null, `All ${pluralTextModel || 'Models'}`)))];\n\n  if (loggedIn && current !== null && current !== void 0 && current._id && (current === null || current === void 0 ? void 0 : current.role) === 'performer') {\n    MenuItem = [...MenuItem, __jsx(Menu.Item, {\n      disabled: router.route === '/live',\n      key: \"left-menu-live-chat\"\n    }, __jsx(Link, {\n      href: \"/live\"\n    }, __jsx(\"a\", null, \"Go Live\"))), __jsx(Menu.Item, {\n      disabled: router.route === '/live/groupchat',\n      key: \"left-menu-groupchat\"\n    }, __jsx(Link, {\n      href: `/live/${path}groupchat`\n    }, __jsx(\"a\", null, \"Group Chat\")))];\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Menu, {\n    mode: \"horizontal\",\n    className: \"menu-left-header\"\n  }, MenuItem));\n};\n\nLeftHeaderContent.defaultProps = {\n  loggedIn: false,\n  current: null,\n  settings: null,\n  pluralTextModel: '',\n  performerCategories: {\n    total: 0,\n    data: []\n  }\n};\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({\n  loggedIn: state.auth.loggedIn\n}, state.performer.performers), state.ui);\n\nconst mapDispatch = {\n  updateUIValue\n};\nexport default connect(mapStateToProps, mapDispatch)(LeftHeaderContent);","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/src/components/common/layout/left-header-content.tsx"],"names":["React","Menu","Link","connect","updateUIValue","SETTING_KEYS","useRouter","LeftHeaderContent","loggedIn","current","pluralTextModel","performerCategories","settings","router","path","OPTION_FOR_GROUP","MenuItem","data","length","map","category","_id","pathname","query","slug","JSON","stringify","name","role","route","defaultProps","total","mapStateToProps","state","auth","performer","performers","ui","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Menu } from 'antd';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport {\n  IPerformerCategogies,\n  IDataResponse,\n  IPerformer,\n  IStudio,\n  IUser,\n  StreamSettings\n} from 'src/interfaces';\nimport './left-header-content.less';\nimport { SETTING_KEYS } from 'src/constants';\nimport { useRouter } from 'next/router';\n\ninterface Props {\n  loggedIn?: boolean;\n  current?: IPerformer & IUser & IStudio;\n  performerCategories?: IDataResponse<IPerformerCategogies>;\n  settings?: StreamSettings;\n  pluralTextModel?: string;\n}\n\nconst LeftHeaderContent = ({\n  loggedIn,\n  current,\n  pluralTextModel,\n  performerCategories,\n  settings\n}: Props) => {\n  const router = useRouter();\n  const path = settings[SETTING_KEYS.OPTION_FOR_GROUP] === 'webrtc' ? 'webrtc/' : '';\n  let MenuItem = [\n    <Menu.Item key=\"home\">\n      <Link href=\"/cams\" shallow as=\"/\">\n        <a>Home</a>\n      </Link>\n    </Menu.Item>,\n    <Menu.SubMenu\n      title=\"Categories\"\n      key=\"left-menu-performer-categories\"\n      popupClassName=\"menu-left-header-submenu-popup\"\n    >\n      {performerCategories.data.length > 0\n        && performerCategories.data.map((category: IPerformerCategogies) => (\n          <Menu.Item key={`category-${category._id}`}>\n            <Link\n              href={{\n                pathname: '/performer-category',\n                query: {\n                  slug: category.slug,\n                  category: JSON.stringify(category)\n                }\n              }}\n              as={`/performer-category/${category.slug}`}\n            >\n              <a>{category.name}</a>\n            </Link>\n          </Menu.Item>\n        ))}\n    </Menu.SubMenu>,\n    <Menu.Item key=\"vip-model\">\n      <Link href=\"/performer-category\" as=\"/vip-models\">\n        <a>Vip Models</a>\n      </Link>\n    </Menu.Item>,\n    <Menu.Item key=\"all-model\">\n      <Link href=\"/performer-category\" as=\"/all-models\">\n        <a>{`All ${pluralTextModel || 'Models'}`}</a>\n      </Link>\n    </Menu.Item>\n  ];\n\n  if (loggedIn && current?._id && current?.role === 'performer') {\n    MenuItem = [\n      ...MenuItem,\n      <Menu.Item disabled={router.route === '/live'} key=\"left-menu-live-chat\">\n        <Link href=\"/live\">\n          <a>Go Live</a>\n        </Link>\n      </Menu.Item>,\n      <Menu.Item\n        disabled={router.route === '/live/groupchat'}\n        key=\"left-menu-groupchat\"\n      >\n        <Link href={`/live/${path}groupchat`}>\n          <a>Group Chat</a>\n        </Link>\n      </Menu.Item>\n    ];\n  }\n\n  return (\n    <>\n      <Menu mode=\"horizontal\" className=\"menu-left-header\">\n        {MenuItem}\n      </Menu>\n    </>\n  );\n};\n\nLeftHeaderContent.defaultProps = {\n  loggedIn: false,\n  current: null,\n  settings: null,\n  pluralTextModel: '',\n  performerCategories: {\n    total: 0,\n    data: []\n  }\n};\nconst mapStateToProps = (state) => ({\n  loggedIn: state.auth.loggedIn,\n  ...state.performer.performers,\n  ...state.ui\n});\nconst mapDispatch = { updateUIValue };\nexport default connect(mapStateToProps, mapDispatch)(LeftHeaderContent);\n"]},"metadata":{},"sourceType":"module"}