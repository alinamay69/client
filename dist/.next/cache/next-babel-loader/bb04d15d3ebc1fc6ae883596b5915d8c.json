{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { connect } from 'react-redux';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateCurrentStudio } from '@redux/studio/actions';\nimport { favouriteService } from 'src/services';\nimport { message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport Router, { withRouter } from 'next/router';\nimport { getBanners } from '@redux/banner/actions';\nimport { createSelector } from 'reselect';\nimport { SocketContext } from 'src/socket';\nimport Head from 'next/head';\nimport { camAggregatorService } from '@services/cam-aggregator.service';\nimport AggregatorFilter from '@components/cam-aggregator/aggregator-filter';\nimport AggregatorProfileGridCard from '@components/cam-aggregator/grid-card';\nimport Loader from '@components/common/base/loader';\nconst initQueryState = {\n  offset: 0,\n  limit: 60,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc',\n  q: ''\n};\n\nclass CamAggregator extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"search\", async params => {\n      const {\n        query\n      } = this.state;\n\n      try {\n        await this.setState({\n          loading: true\n        });\n        const resp = await camAggregatorService.online(_objectSpread(_objectSpread({}, query), params || {}));\n        this.setState({\n          performers: resp.data.data,\n          total: resp.data.count\n        });\n      } catch (error) {\n        const err = await Promise.resolve(error);\n        message.error(getResponseError(err));\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    });\n\n    this.state = {\n      query: initQueryState,\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    var _router$query, _router$query2;\n\n    const {\n      router\n    } = this.props;\n    this.search({\n      tag: ((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.tag) || '',\n      q: ((_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.q) || ''\n    });\n    this.getCamAggregatorCategories();\n  }\n\n  componentDidUpdate(prevProps, prevStates) {\n    const {\n      router\n    } = this.props;\n    const {\n      query\n    } = this.state;\n\n    if (router.query.q !== prevProps.router.query.q || query !== prevStates.query) {\n      var _router$query3, _router$query4;\n\n      const q = {\n        tag: ((_router$query3 = router.query) === null || _router$query3 === void 0 ? void 0 : _router$query3.tag) || '',\n        q: ((_router$query4 = router.query) === null || _router$query4 === void 0 ? void 0 : _router$query4.q) || ''\n      };\n      if (router.query.q !== prevProps.router.query.q) q.offset = 0;\n      this.search(q);\n    }\n\n    if (router.query.category !== prevProps.router.query.category) {\n      this.setQuery('category', router.query.category || '');\n    }\n  }\n\n  async onLike(performer) {\n    const {\n      updatePerformerFavourite: dispatchUpdatePerformerFavorite\n    } = this.props;\n    const {\n      _id,\n      isFavorite\n    } = performer;\n\n    try {\n      await favouriteService.favorite(_id, isFavorite);\n      dispatchUpdatePerformerFavorite(_id);\n    } catch (error) {\n      const e = await Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  setFilter(name, value) {\n    const {\n      query\n    } = this.state;\n\n    if (name === 'category' && value !== query.category) {\n      Router.push({\n        pathname: '/cams',\n        query: {\n          category: value\n        }\n      }, `/cams?category=${value}`);\n      return;\n    }\n\n    this.setState({\n      query: _objectSpread(_objectSpread({}, query), {}, {\n        [name]: value\n      })\n    });\n  }\n\n  setQuery(name, value) {\n    const {\n      query\n    } = this.state;\n    this.setState({\n      query: _objectSpread(_objectSpread({}, query), {}, {\n        [name]: value\n      })\n    });\n  }\n\n  async getCamAggregatorCategories() {\n    const resp = await camAggregatorService.categories({});\n    await this.setState({\n      categories: resp.data\n    });\n  }\n\n  clearFilter() {\n    this.setState({\n      query: initQueryState\n    });\n  }\n\n  render() {\n    const {\n      ui,\n      countries\n    } = this.props;\n    const {\n      query,\n      performers = [],\n      categories,\n      total,\n      loading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, ui === null || ui === void 0 ? void 0 : ui.siteName, ' ', \"| Cams\")), __jsx(\"div\", {\n      className: \"homepage\"\n    }, __jsx(AggregatorFilter, _extends({\n      categories: categories,\n      countries: countries,\n      setFilter: this.setFilter.bind(this),\n      clearFilter: this.clearFilter.bind(this)\n    }, query)), __jsx(Loader, {\n      spinning: loading,\n      fullScreen: true\n    }), __jsx(PerformerGrid, _extends({}, this.props, {\n      data: performers,\n      total: total,\n      success: true,\n      onLike: this.onLike.bind(this),\n      title: \"Live cams\",\n      isPage: true,\n      setFilter: this.setFilter.bind(this),\n      gridCard: AggregatorProfileGridCard\n    }, query))));\n  }\n\n}\n\n_defineProperty(CamAggregator, \"layout\", 'public');\n\n_defineProperty(CamAggregator, \"authenticate\", false);\n\nconst bannerSelecter = state => state.banner.listBanners.data;\n\nconst filterBanner = createSelector(bannerSelecter, banners => {\n  if (!banners.length) return {};\n  return {\n    topBanners: banners.filter(b => b.position === 'top'),\n    rightBanners: banners.filter(b => b.position === 'right'),\n    bottomBanners: banners.filter(b => b.position === 'bottom')\n  };\n});\nCamAggregator.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({\n  ui: _objectSpread({}, state.ui)\n}, state.performer.performers), {}, {\n  banners: filterBanner(state),\n  countries: state.settings.countries,\n  loggedIn: state.auth.loggedIn // categories: state.performer.categories.data\n\n});\n\nconst mapDispatch = {\n  getBanners,\n  updateCurrentUser,\n  updateCurrentStudio,\n  loginSuccess\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(CamAggregator));","map":null,"metadata":{},"sourceType":"module"}