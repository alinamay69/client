{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable camelcase */\nimport React, { PureComponent } from 'react';\nimport withAntmedia from 'src/antmedia';\nimport { Button, Badge, message } from 'antd';\nimport { getResponseError } from '@lib/utils';\nimport { streamService } from 'src/services';\nimport videojs from 'video.js';\nimport MicControlsPlugin from 'src/videojs/mic-controls/plugin';\nimport './index.less';\nimport { WEBRTC_ADAPTOR_INFORMATIONS } from 'src/antmedia/constants';\nimport Router from 'next/router';\n\nclass Publisher extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"publisher\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      if (this.publisher) {\n        this.publisher.dispose();\n        this.publisher = undefined;\n      }\n    });\n\n    this.state = {\n      streamId: ''\n    };\n  }\n\n  componentDidMount() {\n    videojs.registerPlugin('webRTCMicControlsPlugin', MicControlsPlugin);\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  async handlePublishing(streamId) {\n    const {\n      webRTCAdaptor,\n      leaveSession,\n      settings\n    } = this.props;\n\n    try {\n      const token = await streamService.getPublishToken({\n        streamId,\n        settings\n      });\n      webRTCAdaptor.publish(streamId, token);\n    } catch (e) {\n      const error = await Promise.resolve(e);\n      message.error(getResponseError(error));\n      leaveSession();\n    }\n  }\n\n  publish(streamId) {\n    const {\n      initialized\n    } = this.props;\n    this.setState({\n      streamId\n    });\n    initialized && this.handlePublishing(streamId);\n  }\n\n  start() {\n    const {\n      initWebRTCAdaptor,\n      initialized,\n      publish_started\n    } = this.props;\n    const {\n      streamId\n    } = this.state;\n\n    if (initialized && !publish_started && streamId) {\n      this.handlePublishing(streamId);\n    }\n\n    initWebRTCAdaptor(this.handelWebRTCAdaptorCallback.bind(this));\n  }\n\n  handelWebRTCAdaptorCallback(info) {\n    const {\n      muteLocalMic,\n      unmuteLocalMic\n    } = this.props;\n\n    if (info === WEBRTC_ADAPTOR_INFORMATIONS.PUBLISH_STARTED) {\n      const player = videojs('publisher', {\n        liveui: true,\n        controls: true,\n        muted: true,\n        controlBar: {\n          playToggle: false,\n          currentTimeDisplay: false,\n          fullscreenToggle: false,\n          pictureInPictureToggle: false,\n          volumePanel: false\n        }\n      });\n      player.error(null);\n      player.one('play', () => {\n        this.publisher = player; // eslint-disable-next-line dot-notation\n\n        this.publisher['webRTCMicControlsPlugin']({\n          muteLocalMic,\n          unmuteLocalMic,\n          isMicMuted: false\n        });\n      });\n    }\n  }\n\n  stop() {\n    window.location.reload();\n  }\n\n  render() {\n    const {\n      initialized,\n      publish_started\n    } = this.props;\n    const videoProps = {\n      id: 'publisher',\n      className: 'video-js',\n      autoPlay: true,\n      muted: true,\n      controls: false,\n      playsInline: true,\n      style: {\n        width: '100%'\n      },\n      hidden: !publish_started\n    };\n    return __jsx(\"div\", {\n      style: {\n        minHeight: 300\n      },\n      className: \"text-center\"\n    }, initialized && publish_started && __jsx(Button, {\n      type: \"default\",\n      onClick: this.stop.bind(this),\n      block: true,\n      className: \"mb-10\"\n    }, \"Stop Streaming\"), __jsx(\"video\", videoProps), publish_started && __jsx(Badge, {\n      status: \"success\",\n      text: __jsx(\"span\", {\n        className: \"badge-success publishing\"\n      }, \"Publishing\")\n    }));\n  }\n\n}\n\nexport default withAntmedia(Publisher);","map":null,"metadata":{},"sourceType":"module"}