{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable dot-notation */\nimport React, { PureComponent } from 'react';\nimport Head from 'next/head';\nimport { Row, Col, message } from 'antd';\nimport { HLS, WEBRTC } from 'src/interfaces';\nimport { connect } from 'react-redux';\nimport { streamService, performerService, messageService } from 'src/services';\nimport { SocketContext, Event } from 'src/socket';\nimport nextCookie from 'next-cookies';\nimport ModalBuyAssets from '@components/performer-assets/common/modal-buy-assets';\nimport PerformerProduct from '@components/performer-assets/product-carousel';\nimport PerformerVideo from '@components/performer-assets/video-carousel';\nimport PerformerGallery from '@components/performer-assets/gallery-carousel';\nimport ProfileCard from '@components/performer/profile-card';\nimport PerformerCarousel from '@components/performer/performer-carousel';\nimport Header from '@components/streaming/header';\nimport Footer from '@components/streaming/footer';\nimport Router from 'next/router';\nimport ChatBox from '@components/stream-chat/chat-box';\nimport LiveSubscriber from 'src/components/streaming/subscriber';\nimport { loadStreamMessages, getStreamConversationSuccess, receiveStreamMessageSuccess, resetStreamMessage, resetAllStreamMessage } from '@redux/stream-chat/actions';\nimport { getPerformerDetails, updatePerformerAsset } from '@redux/performer/actions';\nimport { updateCurrentUserBalance } from '@redux/user/actions';\nimport { getResponseError } from '@lib/utils';\nimport { StatusCodes } from 'http-status-codes';\nimport './index.less';\nimport { currentUserSelecter } from '@redux/selectors'; // eslint-disable-next-line no-shadow\n\nvar PERFORMER_ASSETS_TYPE; // eslint-disable-next-line no-shadow\n\n(function (PERFORMER_ASSETS_TYPE) {\n  PERFORMER_ASSETS_TYPE[\"PRODUCT\"] = \"product\";\n  PERFORMER_ASSETS_TYPE[\"GALLERY\"] = \"gallery\";\n  PERFORMER_ASSETS_TYPE[\"VIDEO\"] = \"video\";\n})(PERFORMER_ASSETS_TYPE || (PERFORMER_ASSETS_TYPE = {}));\n\nvar STREAM_EVENT; // eslint-disable-next-line no-shadow\n\n(function (STREAM_EVENT) {\n  STREAM_EVENT[\"JOIN_BROADCASTER\"] = \"join-broadcaster\";\n  STREAM_EVENT[\"MODEL_LEFT\"] = \"model-left\";\n  STREAM_EVENT[\"ROOM_INFORMATIOM_CHANGED\"] = \"public-room-changed\";\n  STREAM_EVENT[\"MODEL_UPDATE_STREAMING_STATUS\"] = \"modelUpdateStreamingStatus\";\n  STREAM_EVENT[\"USER_LEFT_ROOM\"] = \"USER_LEFT_ROOM\";\n})(STREAM_EVENT || (STREAM_EVENT = {}));\n\nvar EVENT;\n\n(function (EVENT) {\n  EVENT[\"BLOCK_USERS\"] = \"nofify_users_block\";\n})(EVENT || (EVENT = {}));\n\nconst DEFAULT_OFFLINE_IMAGE_URL = '/offline.png';\nconst DEFAULT_PRIVATE_IMAGE_URL = '/private.png';\nconst DEFAULT_GROUP_IMAGE_URL = '/group.png';\nconst DEFAULT_ONLINE_IMAGE_URL = '';\n\nclass LivePage extends PureComponent {\n  static async getInitialProps({\n    ctx\n  }) {\n    try {\n      const {\n        query\n      } = ctx;\n\n      if (false && query.performer) {\n        return {\n          performer: JSON.parse(query.performer)\n        };\n      }\n\n      const {\n        token\n      } = nextCookie(ctx);\n      const headers = {\n        Authorization: token\n      };\n      const resp = await performerService.details(query.username, headers);\n      const performer = resp.data;\n\n      if (performer.isBlocked) {\n        throw StatusCodes.FORBIDDEN;\n      }\n\n      return {\n        performer\n      };\n    } catch (e) {\n      // const err = await PromisePurchaseItemModelresolve(e);\n      if (false) {\n        return Router.push('/');\n      }\n\n      ctx.res.writeHead && ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end && ctx.res.end();\n      return {};\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"subscrbierRef\", void 0);\n\n    _defineProperty(this, \"buyAssetsRef\", void 0);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"onbeforeunload\", () => {\n      this.leavePublicRoom();\n    });\n\n    this.state = {\n      poster: '',\n      total: 0,\n      members: []\n    };\n  }\n\n  componentDidMount() {\n    this.subscrbierRef = /*#__PURE__*/React.createRef();\n    this.buyAssetsRef = /*#__PURE__*/React.createRef();\n    const {\n      performer,\n      user\n    } = this.props;\n\n    if (!performer) {\n      Router.push('/');\n      return;\n    }\n\n    if (user && user.role === 'performer') {\n      Router.push('/live');\n      return;\n    }\n\n    if (user && user.role === 'studio') {\n      Router.push('/studio/account-settings');\n      return;\n    }\n\n    this.socket = this.context;\n    Router.events.on('routeChangeStart', this.onbeforeunload);\n    window.addEventListener('beforeunload', this.onbeforeunload);\n    this.initProfilePage();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      poster\n    } = this.state;\n    const {\n      performer,\n      data,\n      activeConversation\n    } = this.props;\n\n    if (poster !== prevState.poster) {\n      window['player'] && window['player'].poster(poster);\n    }\n\n    if (data && data.isBlocked) {\n      Router.push('/403');\n      return;\n    }\n\n    if (performer && performer._id !== prevProps.performer._id) {\n      this.initProfilePage();\n    }\n\n    if (prevProps.activeConversation !== activeConversation) {\n      var _prevProps$activeConv;\n\n      ((_prevProps$activeConv = prevProps.activeConversation) === null || _prevProps$activeConv === void 0 ? void 0 : _prevProps$activeConv._id) && this.socket.emit('public-stream/leave', {\n        conversationId: prevProps.activeConversation._id\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onbeforeunload);\n    Router.events.off('routeChangeStart', this.onbeforeunload);\n  }\n\n  onChange({\n    total,\n    members,\n    conversationId\n  }) {\n    var _activeConversation$d;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d = activeConversation.data) === null || _activeConversation$d === void 0 ? void 0 : _activeConversation$d._id) === conversationId) {\n      this.setState({\n        total,\n        members\n      });\n    }\n  }\n\n  onBoughtAssetSuccess(type, id, payload) {\n    const {\n      updatePerformerAsset: dispatchUpdatePerformerAsset\n    } = this.props;\n    dispatchUpdatePerformerAsset({\n      type,\n      id,\n      payload\n    });\n  }\n\n  setPoster(status) {\n    const {\n      settings\n    } = this.props;\n\n    switch (status) {\n      case 'private':\n        this.setState({\n          poster: settings.defaultPrivateCallImage || DEFAULT_PRIVATE_IMAGE_URL\n        });\n        break;\n\n      case 'offline':\n        window['player'] && window['player'].controls(false);\n        window['player'] && window['player'].reset();\n        this.setState({\n          poster: settings.defaultOfflineModelImage || DEFAULT_OFFLINE_IMAGE_URL\n        });\n        break;\n\n      case 'public':\n        this.setState({\n          poster: DEFAULT_ONLINE_IMAGE_URL\n        });\n        break;\n\n      case 'group':\n        this.setState({\n          poster: settings.defaultGroupChatImage || DEFAULT_GROUP_IMAGE_URL\n        });\n        break;\n\n      default:\n        this.setState({\n          poster: settings.defaultOfflineModelImage || DEFAULT_OFFLINE_IMAGE_URL\n        });\n        break;\n    }\n  }\n\n  async joinPeformerPublicRoom() {\n    const {\n      performer,\n      loadStreamMessages: dispatchLoadStreamMessages,\n      getStreamConversationSuccess: dispatchGetStreamConversationSuccess\n    } = this.props;\n\n    if (performer) {\n      try {\n        // this.setState({ loading: true })\n        const resp = await messageService.findPublicConversationPerformer(performer._id);\n        const conversation = resp.data;\n\n        if (conversation && conversation._id) {\n          dispatchGetStreamConversationSuccess({\n            data: conversation\n          });\n          dispatchLoadStreamMessages({\n            conversationId: conversation._id,\n            limit: 25,\n            offset: 0,\n            type: conversation.type\n          });\n          this.socket = this.context;\n          this.socket && this.socket.emit('public-stream/join', {\n            conversationId: conversation._id\n          });\n        } else {\n          throw new Promise(resolve => resolve('No available broadcast. Try again later'));\n        }\n      } catch (e) {\n        const error = await Promise.resolve(e);\n        message.error(getResponseError(error));\n      } finally {// this.setState({ loading: false});\n      }\n    }\n  }\n\n  initProfilePage() {\n    var _this$subscrbierRef$c;\n\n    const {\n      performer,\n      performer: {\n        streamingStatus\n      },\n      getPerformerDetails: dispatchGetPerformerDetail\n    } = this.props;\n    (_this$subscrbierRef$c = this.subscrbierRef.current) === null || _this$subscrbierRef$c === void 0 ? void 0 : _this$subscrbierRef$c.resetPlaybackVideo();\n    this.setPoster(streamingStatus);\n    const content = document.querySelector('.content');\n    content.scroll({\n      top: 0,\n      behavior: 'auto'\n    });\n    dispatchGetPerformerDetail(performer);\n    this.inscreaseView();\n    this.joinPeformerPublicRoom();\n  }\n\n  async subscribe({\n    performerId\n  }) {\n    try {\n      const {\n        settings: {\n          optionForBroadcast\n        },\n        performer\n      } = this.props;\n\n      if (performer._id !== performerId) {\n        return;\n      }\n\n      const resp = await streamService.joinPublicChat(performerId);\n      const {\n        sessionId\n      } = resp.data;\n\n      if (optionForBroadcast === HLS) {\n        var _this$subscrbierRef$c2;\n\n        (_this$subscrbierRef$c2 = this.subscrbierRef.current) === null || _this$subscrbierRef$c2 === void 0 ? void 0 : _this$subscrbierRef$c2.playHLS(sessionId);\n      } else if (optionForBroadcast === WEBRTC) {\n        var _this$subscrbierRef$c3;\n\n        (_this$subscrbierRef$c3 = this.subscrbierRef.current) === null || _this$subscrbierRef$c3 === void 0 ? void 0 : _this$subscrbierRef$c3.play(sessionId);\n      }\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n    }\n  }\n\n  leavePublicRoom() {\n    var _activeConversation$d2;\n\n    if (window['player']) {\n      window['player'].reset();\n      window['player'].poster('');\n    }\n\n    const {\n      activeConversation,\n      resetStreamMessage: dispatchResetStreamMessage\n    } = this.props;\n    dispatchResetStreamMessage();\n\n    if (this.socket && activeConversation !== null && activeConversation !== void 0 && (_activeConversation$d2 = activeConversation.data) !== null && _activeConversation$d2 !== void 0 && _activeConversation$d2._id) {\n      this.socket.emit('public-stream/leave', {\n        conversationId: activeConversation.data._id\n      });\n    }\n\n    this.setState({\n      poster: '',\n      total: 0,\n      members: []\n    });\n  }\n\n  modelLeftHandler({\n    performerId\n  }) {\n    var _this$subscrbierRef$c4;\n\n    const {\n      performer\n    } = this.props;\n\n    if (performerId !== performer._id) {\n      return;\n    }\n\n    (_this$subscrbierRef$c4 = this.subscrbierRef.current) === null || _this$subscrbierRef$c4 === void 0 ? void 0 : _this$subscrbierRef$c4.stop();\n    message.info('Model has left the room!');\n  }\n\n  async showAssetToBuy(type, item) {\n    const {\n      isBought,\n      isSale,\n      name,\n      type: itemType\n    } = item;\n\n    switch (type) {\n      case 'gallery':\n        if (isBought || !isSale) {\n          Router.push({\n            pathname: '/photos',\n            query: {\n              data: JSON.stringify(item),\n              id: item._id\n            }\n          }, `/photos/${item._id}`);\n          return;\n        }\n\n        break;\n\n      case 'product':\n        if (isBought && itemType === 'digital') {\n          message.info(`You have purchased ${name} already. Please check your email!`);\n          return;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    this.buyAssetsRef.showModalBuyAssets(item, type);\n  }\n\n  userBlockHandler({\n    performerId\n  }) {\n    const {\n      performer\n    } = this.props;\n\n    if (performerId === performer._id) {\n      Router.push('/403');\n    }\n  }\n\n  modelUpdateStreamingStatusHander({\n    status,\n    id\n  }) {\n    const {\n      performer\n    } = this.props;\n\n    if (id === performer._id) {\n      this.setPoster(status);\n    }\n  }\n\n  async inscreaseView() {\n    try {\n      const {\n        performer: {\n          _id: id\n        }\n      } = this.props;\n      await performerService.increaseView(id); // eslint-disable-next-line no-empty\n    } catch {}\n  }\n\n  userLeftRoomHandle({\n    username,\n    conversationId\n  }) {\n    var _activeConversation$d3;\n\n    const {\n      activeConversation\n    } = this.props;\n\n    if ((activeConversation === null || activeConversation === void 0 ? void 0 : (_activeConversation$d3 = activeConversation.data) === null || _activeConversation$d3 === void 0 ? void 0 : _activeConversation$d3._id) === conversationId) {\n      const {\n        total,\n        members\n      } = this.state;\n      const leftMemberIndex = members.findIndex(m => m.username === username);\n\n      if (leftMemberIndex > -1) {\n        this.setState({\n          total: total - 1,\n          members: members.splice(leftMemberIndex, 1)\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      performer,\n      data,\n      searching,\n      success,\n      products,\n      videos,\n      galleries,\n      ui\n    } = this.props;\n    const {\n      members,\n      total\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, `${ui === null || ui === void 0 ? void 0 : ui.siteName} | ${performer === null || performer === void 0 ? void 0 : performer.username}`)), __jsx(Event, {\n      event: STREAM_EVENT.JOIN_BROADCASTER,\n      handler: this.subscribe.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.MODEL_LEFT,\n      handler: this.modelLeftHandler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.USER_LEFT_ROOM,\n      handler: this.userLeftRoomHandle.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.ROOM_INFORMATIOM_CHANGED,\n      handler: this.onChange.bind(this)\n    }), __jsx(Event, {\n      event: EVENT.BLOCK_USERS,\n      handler: this.userBlockHandler.bind(this)\n    }), __jsx(Event, {\n      event: STREAM_EVENT.MODEL_UPDATE_STREAMING_STATUS,\n      handler: this.modelUpdateStreamingStatusHander.bind(this)\n    }), __jsx(\"div\", {\n      className: \"profile-page\"\n    }, __jsx(ModalBuyAssets // eslint-disable-next-line no-return-assign\n    , _extends({\n      ref: ref => this.buyAssetsRef = ref,\n      onSucess: this.onBoughtAssetSuccess.bind(this)\n    }, this.props)), __jsx(Header, this.props), __jsx(Row, {\n      className: \"streaming-container\"\n    }, __jsx(Col, {\n      md: 13,\n      xs: 24\n    }, __jsx(LiveSubscriber, _extends({}, this.props, {\n      ref: this.subscrbierRef,\n      configs: {\n        isPlayMode: true\n      }\n    })), __jsx(Footer, this.props)), __jsx(Col, {\n      md: 11,\n      xs: 24\n    }, __jsx(ChatBox, _extends({}, this.props, {\n      members: members,\n      totalParticipant: total\n    })))), __jsx(Row, {\n      gutter: [{\n        sm: 25,\n        xs: 0\n      }, {\n        sm: 10,\n        xs: 25\n      }]\n    }, __jsx(Col, {\n      xs: {\n        span: 24\n      },\n      lg: {\n        span: 8\n      }\n    }, __jsx(ProfileCard, {\n      placeholderAvatarUrl: ui === null || ui === void 0 ? void 0 : ui.placeholderAvatarUrl,\n      performer: _objectSpread(_objectSpread({}, performer), data),\n      searching: searching,\n      success: success\n    })), __jsx(Col, {\n      xs: {\n        span: 24\n      },\n      lg: {\n        span: 16\n      }\n    }, __jsx(PerformerProduct, {\n      performer: data,\n      products: products,\n      searching: searching,\n      success: success,\n      purchaseProduct: this.showAssetToBuy.bind(this, 'product')\n    }), __jsx(PerformerVideo, {\n      performer: data,\n      videos: videos,\n      searching: searching,\n      success: success\n    }), __jsx(PerformerGallery, {\n      performer: data,\n      galleries: galleries,\n      searching: searching,\n      success: success,\n      purchaseGallery: this.showAssetToBuy.bind(this, 'gallery')\n    }), __jsx(PerformerCarousel, _extends({\n      performers: data && data.relatedPerformers\n    }, this.props))))));\n  }\n\n}\n\n_defineProperty(LivePage, \"authenticate\", false);\n\nLivePage.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread(_objectSpread({\n  ui: state.ui\n}, state.streaming), state.performer.performerDetails), {}, {\n  user: currentUserSelecter(state),\n  loggedIn: state.auth.loggedIn,\n  activeConversation: state.streamMessage.activeConversation\n});\n\nconst mapDispatch = {\n  loadStreamMessages,\n  getStreamConversationSuccess,\n  receiveStreamMessageSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage,\n  updateCurrentUserBalance,\n  getPerformerDetails,\n  updatePerformerAsset\n};\nexport default connect(mapStateToProps, mapDispatch)(LivePage);","map":null,"metadata":{},"sourceType":"module"}