{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-return-assign */\nimport { generateUuid } from '@lib/string';\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Player from '@components/streaming/ant-video-player';\nimport { Button } from 'antd';\n\nvar Xcams = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Xcams, _PureComponent);\n\n  var _super = _createSuper(Xcams);\n\n  function Xcams() {\n    var _this;\n\n    _classCallCheck(this, Xcams);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"playerRefs\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      streamIds: []\n    });\n\n    return _this;\n  }\n\n  _createClass(Xcams, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var streamIds = this.state.streamIds;\n\n      var arr = _toConsumableArray(streamIds);\n\n      for (var i = 0; i < 5; i += 1) {\n        arr.push(generateUuid());\n      }\n\n      this.setState({\n        streamIds: arr\n      });\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _this2 = this;\n\n      Object.keys(this.playerRefs).forEach(function (id) {\n        var _this2$playerRefs$id;\n\n        (_this2$playerRefs$id = _this2.playerRefs[id]) === null || _this2$playerRefs$id === void 0 ? void 0 : _this2$playerRefs$id.playHLS(id);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var streamIds = this.state.streamIds;\n      return __jsx(React.Fragment, null, __jsx(Button, {\n        type: \"primary\",\n        onClick: this.play.bind(this),\n        disabled: true\n      }, \"Play\"), streamIds.length > 0 && streamIds.map(function (id) {\n        return __jsx(Player, _extends({}, _this3.props, {\n          sessionId: id,\n          configs: {\n            isPlayMode: true\n          },\n          ref: function ref(_ref) {\n            return _this3.playerRefs[id] = _ref;\n          }\n        }));\n      }));\n    }\n  }]);\n\n  return Xcams;\n}(PureComponent);\n\nvar mapStateProps = function mapStateProps(state) {\n  return _objectSpread({}, state.streaming);\n};\n\nexport default connect(mapStateProps)(Xcams);","map":null,"metadata":{},"sourceType":"module"}