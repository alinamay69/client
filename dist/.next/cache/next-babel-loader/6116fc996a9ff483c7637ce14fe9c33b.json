{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport { Card, Space, Tooltip } from 'antd';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { renderTitle } from '@components/performer/performer-grid-card';\nimport { connect } from 'react-redux';\nimport './cam-aggregator.less';\nexport var renderTags = function renderTags(tags) {\n  return __jsx(Space, {\n    className: \"tags\"\n  }, tags.map(function (tag) {\n    return __jsx(Link, {\n      href: {\n        pathname: '/cams',\n        query: {\n          tag: tag\n        }\n      },\n      key: tag,\n      as: \"/cams?tag=\".concat(tag)\n    }, __jsx(\"a\", null, \"#\", tag));\n  }));\n};\n\nvar AggregatorProfileGridCard = function AggregatorProfileGridCard(_ref) {\n  var _performer$stats, _performer$tags;\n\n  var _ref$performer = _ref.performer,\n      performer = _ref$performer === void 0 ? {} : _ref$performer,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? null : _ref$className,\n      _ref$countries = _ref.countries,\n      countries = _ref$countries === void 0 ? [] : _ref$countries,\n      _ref$placeholderAvata = _ref.placeholderAvatarUrl,\n      placeholderAvatarUrl = _ref$placeholderAvata === void 0 ? null : _ref$placeholderAvata;\n  var isOnline = performer.isOnline,\n      streamingStatus = performer.streamingStatus;\n  var country = countries.find(function (c) {\n    return c.code === performer.country;\n  });\n\n  var renderCountry = country && __jsx(Tooltip, {\n    title: country.name\n  }, __jsx(\"img\", {\n    className: \"cam-flag\",\n    src: country.flag,\n    alt: \"\"\n  }));\n\n  var serviceImage = '';\n\n  switch (performer.service) {\n    case 'chaturbate':\n      serviceImage = '/logo-chaturbate.svg';\n      break;\n\n    case 'xlovecam':\n      serviceImage = '/logo-xlovecam.png';\n      break;\n\n    case 'bongacams':\n      serviceImage = '/logo-bongacam.png';\n      break;\n\n    case 'stripcash':\n      serviceImage = '/logo-stripcash.png';\n      break;\n\n    default:\n      break;\n  }\n\n  var statusClassNames = ['p-status'];\n  var status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  var defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, __jsx(Link, {\n    href: {\n      pathname: '/cams/details',\n      query: {\n        username: performer.username\n      }\n    },\n    as: \"/cams/\".concat(performer.username)\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\",\n    style: {\n      backgroundImage: \"url(\".concat(typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl, \")\")\n    }\n  }, __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), serviceImage && __jsx(\"img\", {\n    className: \"cam-logo\",\n    src: serviceImage,\n    alt: performer.service\n  }), renderTitle(performer.gender, performer.username), renderCountry, (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n    className: \"p-viewer\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      overflow: 'hidden'\n    }\n  }, performer.tags && renderTags((_performer$tags = performer.tags) === null || _performer$tags === void 0 ? void 0 : _performer$tags.slice(0, 4))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\n_c = AggregatorProfileGridCard;\n\nvar mapState = function mapState(state) {\n  return {\n    placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n    countries: state.settings.countries\n  };\n};\n\nexport default connect(mapState)(AggregatorProfileGridCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"AggregatorProfileGridCard\");","map":{"version":3,"sources":["/Users/frag-games/Desktop/Test Projects/secret-client/src/components/cam-aggregator/grid-card.tsx"],"names":["Link","Card","Space","Tooltip","EyeOutlined","renderTitle","connect","renderTags","tags","map","tag","pathname","query","AggregatorProfileGridCard","performer","className","countries","placeholderAvatarUrl","isOnline","streamingStatus","country","find","c","code","renderCountry","name","flag","serviceImage","service","statusClassNames","status","push","defaultPlaceholderAvatarUrl","_id","username","backgroundImage","avatar","length","join","gender","stats","views","marginRight","display","flexDirection","justifyContent","overflow","slice","aboutMe","mapState","state","ui","settings"],"mappings":"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","sourcesContent":["import Link from 'next/link';\nimport {\n  Card, Space, Tooltip\n} from 'antd';\nimport {\n  EyeOutlined\n} from '@ant-design/icons';\nimport { renderTitle } from '@components/performer/performer-grid-card';\nimport { connect } from 'react-redux';\nimport './cam-aggregator.less';\n\nexport const renderTags = (tags: string[]) => (\n  <Space className=\"tags\">\n    {tags.map((tag) => (\n      <Link\n        href={{ pathname: '/cams', query: { tag } }}\n        key={tag}\n        as={`/cams?tag=${tag}`}\n      >\n        <a>\n          #\n          {tag}\n        </a>\n      </Link>\n    ))}\n  </Space>\n);\n\nconst AggregatorProfileGridCard = ({\n  performer = {} as any,\n  className = null,\n  countries = [],\n  placeholderAvatarUrl = null\n}: any) => {\n  const { isOnline, streamingStatus } = performer;\n  const country = countries.find((c) => c.code === performer.country);\n  const renderCountry = country && (\n    <Tooltip title={country.name}>\n      <img className=\"cam-flag\" src={country.flag} alt=\"\" />\n    </Tooltip>\n  );\n  let serviceImage = '';\n  switch (performer.service) {\n    case 'chaturbate':\n      serviceImage = '/logo-chaturbate.svg';\n      break;\n    case 'xlovecam':\n      serviceImage = '/logo-xlovecam.png';\n      break;\n    case 'bongacams':\n      serviceImage = '/logo-bongacam.png';\n      break;\n    case 'stripcash':\n      serviceImage = '/logo-stripcash.png';\n      break;\n    default:\n      break;\n  }\n  const statusClassNames = ['p-status'];\n  let status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return (\n    <Card.Grid className={className} key={performer._id} hoverable={false}>\n      <Link\n        href={{\n          pathname: '/cams/details',\n          query: { username: performer.username }\n        }}\n        as={`/cams/${performer.username}`}\n      >\n        <a>\n          <div\n            className=\"performer-avatar\"\n            style={{\n              backgroundImage: `url(${\n                typeof performer.avatar === 'string'\n                && performer.avatar.length > 0\n                  ? performer.avatar\n                  : defaultPlaceholderAvatarUrl\n              })`\n            }}\n          >\n            <span className={statusClassNames.join(' ')}>{status}</span>\n            {serviceImage && <img className=\"cam-logo\" src={serviceImage} alt={performer.service} />}\n            {renderTitle(performer.gender, performer.username)}\n            {renderCountry}\n            {performer?.stats?.views > 0 && (\n              <div className=\"p-viewer\">\n                <EyeOutlined style={{ marginRight: 5 }} />\n                <span>{performer.stats.views}</span>\n              </div>\n            )}\n          </div>\n        </a>\n      </Link>\n      <div className=\"performer-bottom\">\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            overflow: 'hidden'\n          }}\n        >\n          {performer.tags && renderTags(performer.tags?.slice(0, 4))}\n        </div>\n        <div className=\"about-me\">{performer?.aboutMe}</div>\n      </div>\n    </Card.Grid>\n  );\n};\n\nconst mapState = (state) => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n  countries: state.settings.countries\n});\n\nexport default connect(mapState)(AggregatorProfileGridCard);\n"]},"metadata":{},"sourceType":"module"}