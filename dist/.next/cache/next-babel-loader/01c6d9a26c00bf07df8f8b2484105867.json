{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable react/no-array-index-key */\n\n/* eslint-disable no-nested-ternary */\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { Card, Space, Row, Col, Pagination } from 'antd';\nimport { MaleSignIcon, FemaleSignIcon, TransgenderIcon } from '@components/common/base/icons';\nimport { defaultColor } from 'src/lib';\nimport { HeartFilled, HeartOutlined, EyeOutlined, LockOutlined } from '@ant-design/icons';\nimport './index.less';\nimport { chunk } from 'lodash';\nimport Banner from '@components/common/layout/banner';\nimport Loader from '@components/common/base/loader';\nimport { connect } from 'react-redux';\n\nvar renderTitle = function renderTitle(gender, name) {\n  return __jsx(\"div\", {\n    className: \"performer-title\"\n  }, __jsx(\"span\", {\n    style: {\n      marginRight: 5\n    }\n  }, name), gender === 'male' ? __jsx(MaleSignIcon, null) : gender === 'female' ? __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(FemaleSignIcon, null)) : __jsx(\"span\", {\n    className: \"anticon\"\n  }, __jsx(TransgenderIcon, null)));\n};\n\nvar renderTags = function renderTags(tags) {\n  return __jsx(Space, {\n    className: \"tags\"\n  }, tags.map(function (tag) {\n    return __jsx(Link, {\n      href: {\n        pathname: '/tag',\n        query: {\n          tags: tag\n        }\n      },\n      key: tag,\n      as: \"/tag/\".concat(tag)\n    }, __jsx(\"a\", null, \"#\", tag));\n  }));\n};\n\nvar GridCard = function GridCard(_ref) {\n  var _performer$stats;\n\n  var performer = _ref.performer,\n      loggedIn = _ref.loggedIn,\n      onLike = _ref.onLike,\n      className = _ref.className,\n      placeholderAvatarUrl = _ref.placeholderAvatarUrl;\n  var isOnline = performer.isOnline,\n      streamingStatus = performer.streamingStatus;\n  var statusClassNames = ['p-status'];\n  var status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  var defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, performer.isBlocked && __jsx(\"div\", {\n    className: \"blocked-thumb\"\n  }, __jsx(LockOutlined, null)), __jsx(Link, {\n    href: {\n      pathname: '/stream',\n      query: {\n        performer: JSON.stringify(performer)\n      }\n    },\n    as: \"/profile/\".concat(performer.username)\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\",\n    style: {\n      backgroundImage: \"url(\".concat(typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl, \")\")\n    }\n  }, __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), __jsx(\"div\", {\n    className: \"p-gradient\"\n  }, renderTitle(performer.gender, performer.username), __jsx(\"div\", {\n    className: \"performer-view\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) || 0)))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between'\n    }\n  }, __jsx(\"div\", null, performer.tags && renderTags(performer.tags)), __jsx(\"div\", {\n    \"aria-hidden\": true,\n    hidden: !loggedIn,\n    style: {\n      cursor: 'pointer',\n      color: defaultColor.primaryColor\n    },\n    onClick: function onClick() {\n      return onLike(performer);\n    }\n  }, performer.isFavorite ? __jsx(HeartFilled, {\n    className: \"icon\"\n  }) : __jsx(HeartOutlined, {\n    className: \"icon\"\n  }))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\nvar RowGrid = function RowGrid(_ref2) {\n  var data = _ref2.data,\n      loggedIn = _ref2.loggedIn,\n      _onLike = _ref2.onLike,\n      placeholderAvatarUrl = _ref2.placeholderAvatarUrl;\n  return __jsx(Row, null, data && data.length > 0 && data.map(function (performer) {\n    return __jsx(GridCard, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      className: \"performer-box\",\n      key: performer._id,\n      performer: performer,\n      loggedIn: loggedIn,\n      onLike: function onLike() {\n        return _onLike(performer);\n      }\n    });\n  }));\n};\n\nvar renderGrid = function renderGrid(data, loggedIn, _onLike2, rightBanners, bottomBanners, placeholderAvatarUrl) {\n  var length = data.length;\n\n  if (length <= 12) {\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(Row, null, __jsx(Col, {\n      lg: 16,\n      md: 16,\n      xs: 24\n    }, data && data.length > 0 && data.map(function (performer) {\n      return __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: function onLike() {\n          return _onLike2(performer);\n        }\n      });\n    })), __jsx(Col, {\n      lg: 8,\n      md: 4,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))));\n  }\n\n  if (length > 12 && length <= 24) {\n    var dataChunk = chunk(data, 12);\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(Row, null, __jsx(Col, {\n      lg: 16,\n      md: 16,\n      xs: 24\n    }, dataChunk[0] && dataChunk[0].length > 0 && dataChunk[0].map(function (performer) {\n      return __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: function onLike() {\n          return _onLike2(performer);\n        }\n      });\n    })), __jsx(Col, {\n      lg: 8,\n      md: 8,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: dataChunk[1],\n      loggedIn: loggedIn,\n      onLike: function onLike(performer) {\n        return _onLike2(performer);\n      }\n    }), __jsx(Row, null, __jsx(Col, {\n      xs: 24\n    }, bottomBanners && bottomBanners.length > 0 ? __jsx(Banner, {\n      banners: bottomBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner-bottom.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))));\n  }\n\n  if (length > 24 && length <= 36) {\n    var _dataChunk = chunk(data, 12);\n\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: _dataChunk[0],\n      loggedIn: loggedIn,\n      onLike: function onLike(performer) {\n        return _onLike2(performer);\n      }\n    }), __jsx(Row, {\n      className: \"middle-performer-list\"\n    }, __jsx(Col, {\n      xl: 16,\n      lg: 18,\n      md: 18,\n      xs: 24\n    }, _dataChunk[1] && _dataChunk[1].length > 0 && _dataChunk[1].map(function (performer) {\n      return __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: function onLike() {\n          return _onLike2(performer);\n        }\n      });\n    })), __jsx(Col, {\n      xl: 8,\n      lg: 6,\n      md: 6,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: _dataChunk[2],\n      loggedIn: loggedIn,\n      onLike: function onLike(performer) {\n        return _onLike2(performer);\n      }\n    }), __jsx(Row, null, __jsx(Col, {\n      xs: 24\n    }, bottomBanners && bottomBanners.length > 0 ? __jsx(Banner, {\n      banners: bottomBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner-bottom.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))));\n  }\n\n  if (length > 36) {\n    var _dataChunk2 = chunk(data, 12);\n\n    return __jsx(\"div\", {\n      className: \"performer-list\"\n    }, __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: _dataChunk2[0],\n      loggedIn: loggedIn,\n      onLike: function onLike(performer) {\n        return _onLike2(performer);\n      }\n    }), __jsx(Row, null, __jsx(Col, {\n      lg: 16,\n      md: 16,\n      xs: 24\n    }, _dataChunk2[1] && _dataChunk2[1].length > 0 && _dataChunk2[1].map(function (performer) {\n      return __jsx(GridCard, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        className: \"performer-box performer-box-4-item\",\n        key: performer._id,\n        performer: performer,\n        loggedIn: loggedIn,\n        onLike: function onLike() {\n          return _onLike2(performer);\n        }\n      });\n    })), __jsx(Col, {\n      lg: 8,\n      md: 8,\n      xs: 24\n    }, rightBanners && rightBanners.length > 0 ? __jsx(Banner, {\n      classnames: \"right-banners\",\n      banners: rightBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), __jsx(RowGrid, {\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      data: _dataChunk2[2],\n      loggedIn: loggedIn,\n      onLike: function onLike(performer) {\n        return _onLike2(performer);\n      }\n    }), __jsx(Row, null, __jsx(Col, {\n      xs: 24\n    }, bottomBanners && bottomBanners.length > 0 ? __jsx(Banner, {\n      banners: bottomBanners,\n      styleImage: {\n        padding: '10px',\n        width: '100%'\n      }\n    }) : __jsx(\"img\", {\n      src: \"/banner-bottom.png\",\n      alt: \"\",\n      width: \"100%\",\n      className: \"image-banner-right\"\n    }))), _dataChunk2.splice(0, 3) && _dataChunk2.splice(0, 3).length > 0 && _dataChunk2.splice(0, 3).map(function (d, index) {\n      return __jsx(RowGrid, {\n        placeholderAvatarUrl: placeholderAvatarUrl,\n        key: \"row-grid\".concat(index),\n        data: d,\n        loggedIn: loggedIn,\n        onLike: function onLike(performer) {\n          return _onLike2(performer);\n        }\n      });\n    }));\n  }\n\n  return {};\n};\n\nvar PerformerGrid = function PerformerGrid(_ref3) {\n  var data = _ref3.data,\n      searching = _ref3.searching,\n      success = _ref3.success,\n      title = _ref3.title,\n      _onLike3 = _ref3.onLike,\n      loggedIn = _ref3.loggedIn,\n      isPage = _ref3.isPage,\n      rightBanners = _ref3.rightBanners,\n      bottomBanners = _ref3.bottomBanners,\n      offset = _ref3.offset,\n      limit = _ref3.limit,\n      total = _ref3.total,\n      setFilter = _ref3.setFilter,\n      placeholderAvatarUrl = _ref3.placeholderAvatarUrl;\n  var actions = setFilter && total > 0 ? [total >= 60 && __jsx(Pagination, {\n    disabled: searching,\n    current: Math.round(offset / limit) + 1,\n    pageSize: limit,\n    total: total,\n    size: \"small\",\n    onChange: function onChange(page) {\n      return setFilter('offset', (page - 1) * limit);\n    }\n  })] : [];\n  return __jsx(Card, {\n    className: \"performer-grid\",\n    title: title,\n    bordered: false,\n    hoverable: false,\n    bodyStyle: {\n      padding: '0'\n    },\n    actions: actions\n  }, __jsx(Loader, {\n    spinning: searching\n  }), success // eslint-disable-next-line no-nested-ternary\n  && (total > 0 ? isPage ? renderGrid(data, loggedIn, _onLike3, rightBanners, bottomBanners, placeholderAvatarUrl) : data.map(function (performer) {\n    return __jsx(Col, {\n      xl: 6,\n      md: 8,\n      sm: 10,\n      xs: 16,\n      key: performer._id,\n      className: \"pad12-5\"\n    }, __jsx(GridCard, {\n      key: performer === null || performer === void 0 ? void 0 : performer._id,\n      placeholderAvatarUrl: placeholderAvatarUrl,\n      className: \"performer-box\",\n      performer: performer,\n      loggedIn: loggedIn,\n      onLike: function onLike(p) {\n        return _onLike3(p);\n      }\n    }));\n  }) : __jsx(\"div\", {\n    className: \"ant-card-head\"\n  }, \"No model found.\")));\n};\n\nPerformerGrid.defaultProps = {\n  loggedIn: false,\n  setFilter: null,\n  limit: 0,\n  offset: 0,\n  total: 0,\n  success: false,\n  // error: null,\n  searching: false,\n  title: '',\n  onLike: null,\n  isPage: false,\n  rightBanners: [],\n  bottomBanners: [],\n  placeholderAvatarUrl: '/no-avatar.png'\n};\n\nvar mapStates = function mapStates(state) {\n  return {\n    placeholderAvatarUrl: state.ui.placeholderAvatarUrl\n  };\n};\n\nvar mapDispatch = {};\nexport default connect(mapStates, mapDispatch)(PerformerGrid);","map":null,"metadata":{},"sourceType":"module"}