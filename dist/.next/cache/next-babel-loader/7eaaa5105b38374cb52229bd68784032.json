{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport { Card, Space, Tooltip } from 'antd';\nimport { EyeOutlined } from '@ant-design/icons';\nimport { renderTitle } from '@components/performer/performer-grid-card';\nimport { connect } from 'react-redux';\nimport './cam-aggregator.less';\nexport const renderTags = tags => __jsx(Space, {\n  className: \"tags\"\n}, tags.map(tag => __jsx(Link, {\n  href: {\n    pathname: '/cams',\n    query: {\n      tag\n    }\n  },\n  key: tag,\n  as: `/cams?tag=${tag}`\n}, __jsx(\"a\", null, \"#\", tag))));\n\nconst AggregatorProfileGridCard = ({\n  performer = {},\n  className = null,\n  countries = [],\n  placeholderAvatarUrl = null\n}) => {\n  var _performer$stats, _performer$tags;\n\n  const {\n    isOnline,\n    streamingStatus\n  } = performer;\n  const country = countries.find(c => c.code === performer.country);\n\n  const renderCountry = country && __jsx(Tooltip, {\n    title: country.name\n  }, __jsx(\"img\", {\n    className: \"cam-flag\",\n    src: country.flag,\n    alt: \"\"\n  }));\n\n  let serviceImage = '';\n\n  switch (performer.service) {\n    case 'chaturbate':\n      serviceImage = '/logo-chaturbate.svg';\n      break;\n\n    case 'xlovecam':\n      serviceImage = '/logo-xlovecam.png';\n      break;\n\n    case 'bongacams':\n      serviceImage = '/logo-bongacam.png';\n      break;\n\n    case 'stripcash':\n      serviceImage = '/logo-stripcash.png';\n      break;\n\n    default:\n      break;\n  }\n\n  const statusClassNames = ['p-status'];\n  let status = 'offline';\n\n  if (isOnline) {\n    switch (streamingStatus) {\n      case 'private':\n        statusClassNames.push('private');\n        status = 'private chat';\n        break;\n\n      case 'group':\n        statusClassNames.push('group');\n        status = 'group chat';\n        break;\n\n      case 'public':\n        status = 'live';\n        statusClassNames.push('online');\n        break;\n\n      default:\n        status = 'online';\n        statusClassNames.push('online');\n        break;\n    }\n  } else {\n    statusClassNames.push('offline');\n  }\n\n  const defaultPlaceholderAvatarUrl = placeholderAvatarUrl || '/default-user-icon.png';\n  return __jsx(Card.Grid, {\n    className: className,\n    key: performer._id,\n    hoverable: false\n  }, __jsx(Link, {\n    href: {\n      pathname: '/cams/details',\n      query: {\n        username: performer.username\n      }\n    },\n    as: `/cams/${performer.username}`\n  }, __jsx(\"a\", null, __jsx(\"div\", {\n    className: \"performer-avatar\",\n    style: {\n      backgroundImage: `url(${typeof performer.avatar === 'string' && performer.avatar.length > 0 ? performer.avatar : defaultPlaceholderAvatarUrl})`\n    }\n  }, __jsx(\"span\", {\n    className: statusClassNames.join(' ')\n  }, status), serviceImage && __jsx(\"img\", {\n    className: \"cam-logo\",\n    src: serviceImage,\n    alt: performer.service\n  }), renderTitle(performer.gender, performer.username), renderCountry, (performer === null || performer === void 0 ? void 0 : (_performer$stats = performer.stats) === null || _performer$stats === void 0 ? void 0 : _performer$stats.views) > 0 && __jsx(\"div\", {\n    className: \"p-viewer\"\n  }, __jsx(EyeOutlined, {\n    style: {\n      marginRight: 5\n    }\n  }), __jsx(\"span\", null, performer.stats.views))))), __jsx(\"div\", {\n    className: \"performer-bottom\"\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      overflow: 'hidden'\n    }\n  }, performer.tags && renderTags((_performer$tags = performer.tags) === null || _performer$tags === void 0 ? void 0 : _performer$tags.slice(0, 4))), __jsx(\"div\", {\n    className: \"about-me\"\n  }, performer === null || performer === void 0 ? void 0 : performer.aboutMe)));\n};\n\nconst mapState = state => ({\n  placeholderAvatarUrl: state.ui.placeholderAvatarUrl,\n  countries: state.settings.countries\n});\n\nexport default connect(mapState)(AggregatorProfileGridCard);","map":null,"metadata":{},"sourceType":"module"}